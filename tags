!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
10	scan/messlog.f	/^   10 FORMAT(1H ,19A4,A3)$/;"	l	subroutine:MESSLOG	file:
10	scan/mildatim.f	/^   10 FORMAT(I2.2,'-',A4,I4,1X,I2.2,':',I2.2,':',I2.2)$/;"	l	subroutine:MILDATIM	file:
100	scan/messlog.f	/^  100 CMSSG=' '$/;"	l	subroutine:MESSLOG	file:
100	scan/scanorux.f	/^  100 IF(LIN.EQ.LCON) WRITE(LOGUT,105)  !Issue prompt if in VDT mode$/;"	l	file:
1000	scan/scanorux.f	/^ 1000 WRITE(CMSSG,1005)$/;"	l	file:
1005	scan/scanorux.f	/^ 1005 FORMAT('Syntax error or illegal command - ignored')$/;"	l	file:
105	scan/scanorux.f	/^  105 FORMAT(' SCANOR->',$)$/;"	l	file:
110	scan/scanorux.f	/^  110 FORMAT(20A4)$/;"	l	file:
115	scan/scanorux.f	/^  115 FORMAT(12A4,'     - FROM ',5A4)$/;"	l	file:
120	scan/scanorux.f	/^  120 CONTINUE$/;"	l	file:
20	scan/messlog.f	/^   20 IF(LUB.LE.0.OR.LISFLG.NE.'LON ') GO TO 100$/;"	l	subroutine:MESSLOG	file:
20	scan/scanorux.f	/^   20 ICNF='YES '                       !Set "continue flag"$/;"	l	file:
200	scan/scanorux.f	/^  200 CALL HISNIT(LUH,'ZOT ')$/;"	l	file:
210	scan/scanorux.f	/^  210 CALL ZOTTUM(IWD)$/;"	l	file:
220	scan/scanorux.f	/^  220 CALL HISSUM_VM$/;"	l	file:
230	scan/scanorux.f	/^  230 CALL MILV(LWD(1,2),NSEC,XV,KIND,KERR)$/;"	l	file:
25	scan/scanorux.f	/^   25 FORMAT('NUMBER OF BUFFERS PROCESSED = ',I8)$/;"	l	file:
250	scan/scanorux.f	/^ 250  CALL DOSCAN(RETN)$/;"	l	file:
26	scan/scanorux.f	/^   26 FORMAT('  Total Events   Seen Events   Lost Events')$/;"	l	file:
28	scan/scanorux.f	/^   28 FORMAT(3F14.0)$/;"	l	file:
30	scan/scanorux.f	/^   30 LIN=LCON$/;"	l	file:
300	scan/scanorux.f	/^  300 IF(LUT.LT.0) GO TO 320            !END - Tape not open$/;"	l	file:
320	scan/scanorux.f	/^  320 CALL HISNIT(LUH,'HUP ')$/;"	l	file:
340	scan/scanorux.f	/^  340      OPEN(UNIT       = 21,            !Open & delete SHM-file$/;"	l	file:
35	scan/scanorux.f	/^   35 FORMAT('Error reading cmd-file or cmd-file not assigned')$/;"	l	file:
40	scan/messlog.f	/^   40 CONTINUE$/;"	l	subroutine:MESSLOG	file:
40	scan/scanorux.f	/^   40 WRITE(CMSSG,45)$/;"	l	file:
45	scan/scanorux.f	/^   45 FORMAT('END OF COMMAND FILE')$/;"	l	file:
50	scan/messlog.f	/^   50 WRITE(LUB,55,ERR=60)NAMPROG,DATIM,(MSSG(I),I=1,N)$/;"	l	subroutine:MESSLOG	file:
50	scan/scanorux.f	/^   50 LIN=LCON                          !Switch to VDT input$/;"	l	file:
52	scan/scanorux.f	/^   52 CONTINUE$/;"	l	file:
55	scan/messlog.f	/^   55 FORMAT(A4,A3,5A4,1X,26A4)$/;"	l	subroutine:MESSLOG	file:
55	scan/scanorux.f	/^   55 IF(LIN.NE.LCON) GO TO 1000        !Test for VDT input$/;"	l	file:
60	scan/messlog.f	/^   60 NTRY=NTRY+1$/;"	l	subroutine:MESSLOG	file:
60	scan/scanorux.f	/^   60 LIN=LCMD                          !Switch to cmd-file input$/;"	l	file:
65	scan/messlog.f	/^   65 FORMAT(1H ,'10 FAILURES WRITING FOLLOWING TO LOG-FILE')$/;"	l	subroutine:MESSLOG	file:
65	scan/scanorux.f	/^   65 CONTINUE$/;"	l	file:
70	scan/messlog.f	/^   70 FORMAT(1H ,A4,A3,5A4)$/;"	l	subroutine:MESSLOG	file:
70	scan/scanorux.f	/^   70 CALL NUINP(LCMD,IERR)             !Define new cmd-file$/;"	l	file:
75	scan/scanorux.f	/^   75 CONTINUE$/;"	l	file:
ACCUMULATORO	Makefile	/^ACCUMULATORO     = StatsAccumulator.$(ObjSuf)$/;"	m
ACQ2_LIBDIR	Makefile	/^ACQ2_LIBDIR = $(ACQ2_DIR)$/;"	m
ACQ2_LIBDIR	Makefile	/^ACQ2_LIBDIR = $(HHIRF_DIR)$/;"	m
ACQ2_LIBDIR	Makefile	/^ACQ2_LIBDIR = \/usr\/acq2\/lib$/;"	m
ADJUST_OFFSETS	include/pixie16app_defs.h	323;"	d
ALPHA_EVENT	include/Correlator.hpp	/^    enum EEventTypes {IMPLANT_EVENT, ALPHA_EVENT, BETA_EVENT, FISSION_EVENT, $/;"	e	enum:EventInfo::EEventTypes
Accumulate	include/StatsAccumulator.hpp	/^	void Accumulate(const T& t)$/;"	f	class:StatsAccumulator
Add	src/PlotsRegister.cpp	/^bool PlotsRegister::Add (int offset, int range)$/;"	f	class:PlotsRegister
AddBranch	src/EventProcessor.cpp	/^bool EventProcessor::AddBranch(TTree *tree)$/;"	f	class:EventProcessor
AddBranch	src/IonChamberProcessor.cpp	/^bool IonChamberProcessor::AddBranch(TTree *tree)$/;"	f	class:IonChamberProcessor
AddBranch	src/McpProcessor.cpp	/^bool McpProcessor::AddBranch(TTree *tree)$/;"	f	class:McpProcessor
AddBranch	src/ScintROOT.cpp	/^bool ScintROOT::AddBranch(TTree *tree)$/;"	f	class:ScintROOT
AddBranch	src/VandleROOT.cpp	/^bool VandleROOT::AddBranch(TTree *tree)$/;"	f	class:VandleROOT
AddChan	src/RawEvent.cpp	/^void RawEvent::AddChan(ChanEvent *event)$/;"	f	class:RawEvent
AddEvent	src/RawEvent.cpp	/^void DetectorSummary::AddEvent(ChanEvent *ev)$/;"	f	class:DetectorSummary
AddTag	include/RawEvent.hpp	/^    void AddTag(const std::string &s, TagValue n) {tag[s] = n;} \/**< Insert a tag *\/$/;"	f	class:Identifier
Analyze	src/CfdAnalyzer.cpp	/^void CfdAnalyzer::Analyze(Trace &trace, const string &detType, $/;"	f	class:CfdAnalyzer
Analyze	src/DoubleTraceAnalyzer.cpp	/^void DoubleTraceAnalyzer::Analyze(Trace &trace, $/;"	f	class:DoubleTraceAnalyzer
Analyze	src/FittingAnalyzer.cpp	/^void FittingAnalyzer::Analyze(Trace &trace, const string &detType, $/;"	f	class:FittingAnalyzer
Analyze	src/TauAnalyzer.cpp	/^void TauAnalyzer::Analyze(Trace &trace, const string &aType, const string &aSubtype)$/;"	f	class:TauAnalyzer
Analyze	src/TraceAnalyzer.cpp	/^void TraceAnalyzer::Analyze(Trace &trace,$/;"	f	class:TraceAnalyzer
Analyze	src/TraceExtracter.cpp	/^void TraceExtracter::Analyze(Trace &trace,$/;"	f	class:TraceExtracter
Analyze	src/TraceFilterer.cpp	/^void TraceFilterer::Analyze(Trace &trace,$/;"	f	class:TraceFilterer
Analyze	src/TracePlotter.cpp	/^void TracePlotter::Analyze(Trace &trace,$/;"	f	class:TracePlotter
Analyze	src/WaveformAnalyzer.cpp	/^void WaveformAnalyzer::Analyze(Trace &trace,$/;"	f	class:WaveformAnalyzer
AnalyzeData	src/PulserProcessor.cpp	/^void PulserProcessor::AnalyzeData(void)$/;"	f	class:PulserProcessor
AnalyzeData	src/VandleProcessor.cpp	/^void VandleProcessor::AnalyzeData(void)$/;"	f	class:VandleProcessor
BACK_TO_BACK_IMPLANT	include/Correlator.hpp	/^		      BACK_TO_BACK_IMPLANT = 32,$/;"	e	enum:Correlator::EConditions
BASELINES_BLOCK_LEN	include/pixie16app_defs.h	304;"	d
BEGINEVT	scan/scanorux.f	/^      REAL*8         STRBUFEVT,NUMBUFEVTS,BUF_NUM,LASTEVT,SUMEVTS,$/;"	v
BETA_EVENT	include/Correlator.hpp	/^    enum EEventTypes {IMPLANT_EVENT, ALPHA_EVENT, BETA_EVENT, FISSION_EVENT, $/;"	e	enum:EventInfo::EEventTypes
BIG_OFFSET	src/VandleProcessor.cpp	/^    const unsigned int BIG_OFFSET     = 30;$/;"	m	namespace:dammIds	file:
BUFFER_END	src/PixieStd.cpp	/^enum HistoPoints {BUFFER_START, BUFFER_END, EVENT_START = 10, EVENT_CONTINUE};$/;"	e	enum:HistoPoints	file:
BUFFER_HEAD_LENGTH	include/pixie16app_defs.h	209;"	d
BUFFER_START	src/PixieStd.cpp	/^enum HistoPoints {BUFFER_START, BUFFER_END, EVENT_START = 10, EVENT_CONTINUE};$/;"	e	enum:HistoPoints	file:
BUF_NUM	scan/scanorux.f	/^      REAL*8         STRBUFEVT,NUMBUFEVTS,BUF_NUM,/;"	v
BarData	include/TimingInformation.hpp	/^    struct BarData$/;"	s	class:TimingInformation
BarData	src/TimingInformation.cpp	/^TimingInformation::BarData::BarData(const TimingData &Right, const TimingData &Left, const TimingCal &cal, const string &type) $/;"	f	class:TimingInformation::BarData
BarEventCheck	src/TimingInformation.cpp	/^bool TimingInformation::BarData::BarEventCheck(const double &timeDiff, const string &type)$/;"	f	class:TimingInformation::BarData
BarMap	include/TimingInformation.hpp	/^    typedef std::map<IdentKey, struct BarData> BarMap;$/;"	t	class:TimingInformation
BetaAnalysis	src/ScintProcessor.cpp	/^void ScintProcessor::BetaAnalysis(RawEvent &event)$/;"	f	class:ScintProcessor
BuildBars	src/VandleProcessor.cpp	/^void VandleProcessor::BuildBars(const TimingDataMap &endMap, const string &type, BarMap &barMap) $/;"	f	class:VandleProcessor
CAPTURE_SLOW_TRACE	include/pixie16app_defs.h	78;"	d
CCSRA_ENARELAY	include/pixie16app_defs.h	276;"	d
CCSRA_GOOD	include/pixie16app_defs.h	270;"	d
CCSRA_POLARITY	include/pixie16app_defs.h	271;"	d
CCSRA_QDCENA	include/pixie16app_defs.h	274;"	d
CCSRA_TRACEENA	include/pixie16app_defs.h	273;"	d
CFDANALYZERO	Makefile	/^CFDANALYZERO     = CfdAnalyzer.$(ObjSuf)$/;"	m
CFDDELAY_MAX	include/pixie16app_defs.h	244;"	d
CFDDELAY_MIN	include/pixie16app_defs.h	245;"	d
CHANNEL_HEAD_LENGTH	include/pixie16app_defs.h	211;"	d
CHANNEL_INFO_LENGTH	include/pixie16app_defs.h	214;"	d
CINCLUDEDIRS	Makefile	/^CINCLUDEDIRS  = -Iinclude$/;"	m
CIWD	scan/scanorux.f	/^      CHARACTER*4  CNAMCMDS(20),CIWD(/;"	v
CMSSG	scan/scanorux.f	/^      CHARACTER*112 CMSSG$/;"	v
CNAMCMD	scan/scanorux.f	/^      CHARACTER*4  CNAMCMD(/;"	v
CNAMCMDS	scan/scanorux.f	/^      CHARACTER*4  CNAMCMDS(/;"	v
CNAMS	scan/scanorux.f	/^      CHARACTER*80 CNAMS$/;"	v
CORRELATORO	Makefile	/^CORRELATORO      = Correlator.$(ObjSuf)$/;"	m
CXX	Makefile	/^CXX       = g++$/;"	m
CalcEnergy	src/TimingInformation.cpp	/^double TimingInformation::CalcEnergy(const double &corTOF, const double &z0)$/;"	f	class:TimingInformation
CalcFlightPath	src/TimingInformation.cpp	/^double TimingInformation::BarData::CalcFlightPath(double &timeDiff, const TimingCal& cal, const string &type)$/;"	f	class:TimingInformation::BarData
CalculateFittedFunction	src/FittingAnalyzer.cpp	/^double FittingAnalyzer::CalculateFittedFunction(double &x)$/;"	f	class:FittingAnalyzer
CalculateJacobian	src/FittingAnalyzer.cpp	/^int CalculateJacobian (const gsl_vector * x, void *FitData, gsl_matrix * J)$/;"	f
CalculateReducedChiSquared	src/FittingAnalyzer.cpp	/^double FittingAnalyzer::CalculateReducedChiSquared(const double &dof, $/;"	f	class:FittingAnalyzer
CalculateWalk	src/FittingAnalyzer.cpp	/^double FittingAnalyzer::CalculateWalk(const double &maxVal)$/;"	f	class:FittingAnalyzer
Calibrate	src/DetectorDriver.cpp	/^double Calibration::Calibrate(double raw)$/;"	f	class:Calibration
Calibration	include/DetectorDriver.hpp	/^class Calibration {$/;"	c
Calibration	src/DetectorDriver.cpp	/^Calibration::Calibration() : $/;"	f	class:Calibration
CfdAnalyzer	include/CfdAnalyzer.hpp	/^class CfdAnalyzer : public TraceAnalyzer,$/;"	c
CfdAnalyzer	src/CfdAnalyzer.cpp	/^CfdAnalyzer::CfdAnalyzer() : TraceAnalyzer()$/;"	f	class:CfdAnalyzer
ChanEvent	include/RawEvent.hpp	/^class ChanEvent$/;"	c
ChanEvent	src/RawEvent.cpp	/^ChanEvent::ChanEvent() {$/;"	f	class:ChanEvent
ChannelFromIndex	src/DetectorLibrary.cpp	/^int DetectorLibrary::ChannelFromIndex(int index) const$/;"	f	class:DetectorLibrary
CheckRange	src/Plots.cpp	/^bool Plots::CheckRange(int id) const$/;"	f	class:Plots
CheckRange	src/PlotsRegister.cpp	/^bool PlotsRegister::CheckRange (int offset, int range) const$/;"	f	class:PlotsRegister
Clear	src/IonChamberProcessor.cpp	/^void IonChamberProcessor::Data::Clear(void)$/;"	f	class:IonChamberProcessor::Data
Clear	src/McpProcessor.cpp	/^void McpProcessor::McpData::Clear(void)$/;"	f	class:McpProcessor::McpData
Clear	src/RawEvent.cpp	/^void RawEvent::Clear()$/;"	f	class:RawEvent
Clear	src/StatsAccumulator.cpp	/^void StatsAccumulator::Clear()$/;"	f	class:StatsAccumulator
ClearMaps	src/VandleProcessor.cpp	/^void VandleProcessor::ClearMaps(void)$/;"	f	class:VandleProcessor
CloverEvent	include/GeProcessor.hpp	/^class CloverEvent : public EventContainer$/;"	c
CompareCorrectedTime	src/RawEvent.cpp	/^bool CompareCorrectedTime(const ChanEvent *a, const ChanEvent *b)$/;"	f
CompareTime	src/RawEvent.cpp	/^bool CompareTime(const ChanEvent *a, const ChanEvent *b)$/;"	f
CorrectTOF	include/VandleProcessor.hpp	/^    virtual double CorrectTOF(const double &TOF, $/;"	f	class:VandleProcessor
Correlate	src/Correlator.cpp	/^void Correlator::Correlate(EventInfo &event, $/;"	f	class:Correlator
Correlate	src/ImplantSsdProcessor.cpp	/^void ImplantSsdProcessor::Correlate(Correlator &corr, EventInfo &info, int location)$/;"	f	class:ImplantSsdProcessor
CorrelateAll	src/Correlator.cpp	/^void Correlator::CorrelateAll(EventInfo &event)$/;"	f	class:Correlator
CorrelateAllX	src/Correlator.cpp	/^void Correlator::CorrelateAllX(EventInfo &event, unsigned int bch)$/;"	f	class:Correlator
CorrelateAllY	src/Correlator.cpp	/^void Correlator::CorrelateAllY(EventInfo &event, unsigned int fch)$/;"	f	class:Correlator
CorrelateClock	include/DetectorDriver.hpp	/^    void CorrelateClock(double d, time_t t) {$/;"	f	class:DetectorDriver
CorrelationList	include/Correlator.hpp	/^class CorrelationList : public std::vector<EventInfo>$/;"	c
CorrelationList	src/Correlator.cpp	/^CorrelationList::CorrelationList() : std::vector<EventInfo>()$/;"	f	class:CorrelationList
Correlator	include/Correlator.hpp	/^class Correlator$/;"	c
Correlator	src/Correlator.cpp	/^Correlator::Correlator() : histo(OFFSET, RANGE, PlotsRegister::R() ), $/;"	f	class:Correlator
CrossTalk	src/VandleProcessor.cpp	/^void VandleProcessor::CrossTalk(void)$/;"	f	class:VandleProcessor
CrossTalkKey	include/VandleProcessor.hpp	/^    typedef std::pair<unsigned int, unsigned int> CrossTalkKey; $/;"	t	class:VandleProcessor
CrossTalkMap	include/VandleProcessor.hpp	/^    typedef std::map<CrossTalkKey, double> CrossTalkMap;$/;"	t	class:VandleProcessor
DAC_VOLTAGE_RANGE	include/pixie16app_defs.h	157;"	d
DATA_MEMORY_ADDRESS	include/pixie16app_defs.h	202;"	d
DD_ADD_ENERGY	src/GeProcessor.cpp	/^	    const int DD_ADD_ENERGY          = 160; $/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY	src/GeProcessor.cpp	/^	const int DD_ADD_ENERGY            = 150;$/;"	m	namespace:dammIds::ge	file:
DD_ADD_ENERGY_DELAYED	src/GeProcessor.cpp	/^	    const int DD_ADD_ENERGY_DELAYED  = 164;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY_EARLY	src/GeProcessor.cpp	/^	const int DD_ADD_ENERGY_EARLY      = 151;$/;"	m	namespace:dammIds::ge	file:
DD_ADD_ENERGY_EARLY	src/GeProcessor.cpp	/^        const int DD_ADD_ENERGY_EARLY    = 161;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY_LATE	src/GeProcessor.cpp	/^	const int DD_ADD_ENERGY_LATE       = 152;$/;"	m	namespace:dammIds::ge	file:
DD_ADD_ENERGY_LATE	src/GeProcessor.cpp	/^        const int DD_ADD_ENERGY_LATE     = 162;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY_PROMPT	src/GeProcessor.cpp	/^	    const int DD_ADD_ENERGY_PROMPT   = 163;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY_WITH_DECAY	src/GeProcessor.cpp	/^	const int DD_ADD_ENERGY_WITH_DECAY = 170;$/;"	m	namespace:dammIds::ge	file:
DD_ADD_ENERGY__TIMEX	src/GeProcessor.cpp	/^	    const int DD_ADD_ENERGY__TIMEX   = 181;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ADD_ENERGY__TIMEX	src/GeProcessor.cpp	/^	const int DD_ADD_ENERGY__TIMEX       = 171; \/\/ with x granularities$/;"	m	namespace:dammIds::ge	file:
DD_ALL_ENERGY__LOCATION	src/ImplantSsdProcessor.cpp	/^        const int DD_ALL_ENERGY__LOCATION      = 9;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ALL_ENERGY__TOFX	src/ImplantSsdProcessor.cpp	/^        const int DD_ALL_ENERGY__TOFX         = 60;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ALL_ENERGY__TOFX_GATED	src/ImplantSsdProcessor.cpp	/^        const int DD_ALL_ENERGY__TOFX_GATED   = 90;$/;"	m	namespace:dammIds::implantSsd	file:
DD_AMP	src/FittingAnalyzer.cpp	/^      const int DD_AMP        = 3;$/;"	m	namespace:dammIds::waveformanalyzer	file:
DD_AMPMAPSTART	src/PulserProcessor.cpp	/^      const int DD_AMPMAPSTART = 7; $/;"	m	namespace:dammIds::pulser	file:
DD_AMPMAPSTART	src/VandleProcessor.cpp	/^	const int DD_AMPMAPSTART = 7  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_AMPMAPSTOP	src/PulserProcessor.cpp	/^      const int DD_AMPMAPSTOP  = 8; $/;"	m	namespace:dammIds::pulser	file:
DD_AMPMAPSTOP	src/VandleProcessor.cpp	/^	const int DD_AMPMAPSTOP  = 8  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_ANGLE__GATEX	src/GeProcessor.cpp	/^        const int DD_ANGLE__GATEX        = 165; $/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ANGLE__GATEX	src/GeProcessor.cpp	/^    const int DD_ANGLE__GATEX         = 155;$/;"	m	namespace:dammIds::ge	file:
DD_AVERAGE_TRACE	include/DammPlotIds.hpp	/^        const int DD_AVERAGE_TRACE    = 4;$/;"	m	namespace:dammIds::trace
DD_BUFFER_START_TIME	include/DammPlotIds.hpp	/^        const int DD_BUFFER_START_TIME = 1808;$/;"	m	namespace:dammIds::raw
DD_CLOVER_ENERGY_RATIO	src/GeProcessor.cpp	/^	const int DD_CLOVER_ENERGY_RATIO   = 107;$/;"	m	namespace:dammIds::ge	file:
DD_CORRELATED_TOF	src/VandleProcessor.cpp	/^	const int DD_CORRELATED_TOF      = 17;$/;"	m	namespace:dammIds::vandle	file:
DD_CORTOFBARS	src/VandleProcessor.cpp	/^	const int DD_CORTOFBARS       = 5;$/;"	m	namespace:dammIds::vandle	file:
DD_DEAD_TIME_CUMUL	include/DammPlotIds.hpp	/^        const int DD_DEAD_TIME_CUMUL   = 1807; $/;"	m	namespace:dammIds::raw
DD_DECAY_ALL_ENERGY__TX	src/ImplantSsdProcessor.cpp	/^        const int DD_DECAY_ALL_ENERGY__TX     = 20;$/;"	m	namespace:dammIds::implantSsd	file:
DD_DECAY_BACK_ENERGY__POSITION	src/DssdProcessor.cpp	/^        const int DD_DECAY_BACK_ENERGY__POSITION    = 44;$/;"	m	namespace:dammIds::dssd	file:
DD_DECAY_ENERGY__LOCATION	src/ImplantSsdProcessor.cpp	/^        const int DD_DECAY_ENERGY__LOCATION    = 1;$/;"	m	namespace:dammIds::implantSsd	file:
DD_DECAY_FRONT_ENERGY__POSITION	src/DssdProcessor.cpp	/^        const int DD_DECAY_FRONT_ENERGY__POSITION   = 43;$/;"	m	namespace:dammIds::dssd	file:
DD_DECAY_NOBEAM_ENERGY__TX	src/ImplantSsdProcessor.cpp	/^        const int DD_DECAY_NOBEAM_ENERGY__TX  = 30;$/;"	m	namespace:dammIds::implantSsd	file:
DD_DECAY_POSITION	src/DssdProcessor.cpp	/^        const int DD_DECAY_POSITION   = 26;$/;"	m	namespace:dammIds::dssd	file:
DD_DISCRIM	src/ScintProcessor.cpp	/^        const int DD_DISCRIM          = 13;$/;"	m	namespace:dammIds::scint	file:
DD_DOUBLE_TRACE	include/DammPlotIds.hpp	/^        const int DD_DOUBLE_TRACE     = 20;$/;"	m	namespace:dammIds::trace
DD_EBACK__ENERGY_DETX	include/IonChamberProcessor.hpp	/^    const int DD_EBACK__ENERGY_DETX  = 3300; \/\/ + detector num$/;"	m	namespace:dammIds::ionChamber
DD_ENERGY	src/GeProcessor.cpp	/^	    const int DD_ENERGY              = 110; $/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ENERGY	src/GeProcessor.cpp	/^	const int DD_ENERGY                = 100;$/;"	m	namespace:dammIds::ge	file:
DD_ENERGY2__ENERGY1	include/DammPlotIds.hpp	/^        const int DD_ENERGY2__ENERGY1 = 22;$/;"	m	namespace:dammIds::trace
DD_ENERGY2__TDIFF	include/DammPlotIds.hpp	/^        const int DD_ENERGY2__TDIFF   = 21;$/;"	m	namespace:dammIds::trace
DD_ENERGY_WITH_DECAY	src/GeProcessor.cpp	/^	const int DD_ENERGY_WITH_DECAY     = 120;$/;"	m	namespace:dammIds::ge	file:
DD_ENERGY__DECAY_TIME_GRANX	src/DssdProcessor.cpp	/^        const int DD_ENERGY__DECAY_TIME_GRANX = 50;$/;"	m	namespace:dammIds::dssd	file:
DD_ENERGY__GATEX	src/GeProcessor.cpp	/^        const int DD_ENERGY__GATEX       = 166; $/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ENERGY__GATEX	src/GeProcessor.cpp	/^    const int DD_ENERGY__GATEX        = 156;$/;"	m	namespace:dammIds::ge	file:
DD_ENERGY__LOCATION_BEAM	src/ImplantSsdProcessor.cpp	/^        const int DD_ENERGY__LOCATION_BEAM     = 2;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ENERGY__LOCATION_NOBEAM	src/ImplantSsdProcessor.cpp	/^        const int DD_ENERGY__LOCATION_NOBEAM   = 3;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ENERGY__LOCATION_PROJLIKE	src/ImplantSsdProcessor.cpp	/^        const int DD_ENERGY__LOCATION_PROJLIKE = 5;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ENERGY__LOCATION_UNKNOWN	src/ImplantSsdProcessor.cpp	/^        const int DD_ENERGY__LOCATION_UNKNOWN  = 6;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ENERGY__LOCATION_VETO	src/ImplantSsdProcessor.cpp	/^        const int DD_ENERGY__LOCATION_VETO     = 4;$/;"	m	namespace:dammIds::implantSsd	file:
DD_ENERGY__TIMEX	src/GeProcessor.cpp	/^	    const int DD_ENERGY__TIMEX       = 131; $/;"	m	namespace:dammIds::ge::betaGated	file:
DD_ENERGY__TIMEX	src/GeProcessor.cpp	/^	const int DD_ENERGY__TIMEX           = 121; \/\/ with x granularities$/;"	m	namespace:dammIds::ge	file:
DD_ESUM__ENERGY_DETX	include/IonChamberProcessor.hpp	/^    const int DD_ESUM__ENERGY_DETX   = 3250; \/\/ + detector num    $/;"	m	namespace:dammIds::ionChamber
DD_FILTER1	include/DammPlotIds.hpp	/^        const int DD_FILTER1          = 1;$/;"	m	namespace:dammIds::trace
DD_FILTER2	include/DammPlotIds.hpp	/^        const int DD_FILTER2          = 2;$/;"	m	namespace:dammIds::trace
DD_FILTER3	include/DammPlotIds.hpp	/^        const int DD_FILTER3          = 3;$/;"	m	namespace:dammIds::trace
DD_FIRST_DECAY_ENERGY__TX	src/ImplantSsdProcessor.cpp	/^        const int DD_FIRST_DECAY_ENERGY__TX   = 50;$/;"	m	namespace:dammIds::implantSsd	file:
DD_FISSION_ENERGY__LOCATION	src/ImplantSsdProcessor.cpp	/^        const int DD_FISSION_ENERGY__LOCATION  = 10;$/;"	m	namespace:dammIds::implantSsd	file:
DD_GAMMAENERGYVSTOF	src/VandleProcessor.cpp	/^	const int DD_GAMMAENERGYVSTOF = 24;$/;"	m	namespace:dammIds::vandle	file:
DD_GATEDTQDCAVEVSTOF	src/VandleProcessor.cpp	/^	const int DD_GATEDTQDCAVEVSTOF  = 3+MISC_OFFSET;$/;"	m	namespace:dammIds::vandle	file:
DD_IMPLANT_BACK_ENERGY__POSITION	src/DssdProcessor.cpp	/^        const int DD_IMPLANT_BACK_ENERGY__POSITION  = 42;$/;"	m	namespace:dammIds::dssd	file:
DD_IMPLANT_ENERGY__LOCATION	src/ImplantSsdProcessor.cpp	/^        const int DD_IMPLANT_ENERGY__LOCATION  = 0;$/;"	m	namespace:dammIds::implantSsd	file:
DD_IMPLANT_ENERGY__TOFX	src/ImplantSsdProcessor.cpp	/^        const int DD_IMPLANT_ENERGY__TOFX     = 70;   $/;"	m	namespace:dammIds::implantSsd	file:
DD_IMPLANT_FRONT_ENERGY__POSITION	src/DssdProcessor.cpp	/^        const int DD_IMPLANT_FRONT_ENERGY__POSITION = 41;$/;"	m	namespace:dammIds::dssd	file:
DD_IMPLANT_POSITION	src/DssdProcessor.cpp	/^        const int DD_IMPLANT_POSITION = 25;$/;"	m	namespace:dammIds::dssd	file:
DD_LOC_VETO__LOC_SSD	src/ImplantSsdProcessor.cpp	/^        const int DD_LOC_VETO__LOC_SSD         = 7;$/;"	m	namespace:dammIds::implantSsd	file:
DD_MAX	src/PulserProcessor.cpp	/^      const int DD_MAX         = 3; $/;"	m	namespace:dammIds::pulser	file:
DD_MAXBETA	src/ScintProcessor.cpp	/^        const int DD_MAXBETA          = 10;$/;"	m	namespace:dammIds::scint	file:
DD_MAXIMUMBARS	src/VandleProcessor.cpp	/^	const int DD_MAXIMUMBARS      = 1;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXLIQUID	src/ScintProcessor.cpp	/^        const int DD_MAXLIQUID        = 12;$/;"	m	namespace:dammIds::scint	file:
DD_MAXLVSCORTOF	src/VandleProcessor.cpp	/^	const int DD_MAXLVSCORTOF      = 14;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXLVSTOF	src/VandleProcessor.cpp	/^	const int DD_MAXLVSTOF        = 10;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXRVSCORTOF	src/VandleProcessor.cpp	/^	const int DD_MAXRVSCORTOF      = 13;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXRVSTOF	src/VandleProcessor.cpp	/^	const int DD_MAXRVSTOF        = 9;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXSTART0VSCORTOF	src/VandleProcessor.cpp	/^	const int DD_MAXSTART0VSCORTOF = 20;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXSTART0VSTOF	src/VandleProcessor.cpp	/^	const int DD_MAXSTART0VSTOF   = 18;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXSTART1VSCORTOF	src/VandleProcessor.cpp	/^	const int DD_MAXSTART1VSCORTOF = 21;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXSTART1VSTOF	src/VandleProcessor.cpp	/^	const int DD_MAXSTART1VSTOF   = 19;$/;"	m	namespace:dammIds::vandle	file:
DD_MAXSVSTDIFF	src/PulserProcessor.cpp	/^      const int DD_MAXSVSTDIFF = 14; $/;"	m	namespace:dammIds::pulser	file:
DD_MAXSVSTDIFF	src/VandleProcessor.cpp	/^	const int DD_MAXSVSTDIFF = 14 + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_MAXVSTDIFF	src/PulserProcessor.cpp	/^      const int DD_MAXVSTDIFF  = 5; $/;"	m	namespace:dammIds::pulser	file:
DD_MAXVSTDIFF	src/VandleProcessor.cpp	/^	const int DD_MAXVSTDIFF  = 5  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_NEVSDISCRIM	src/ScintProcessor.cpp	/^	const int DD_NEVSDISCRIM      = 20;$/;"	m	namespace:dammIds::scint	file:
DD_POSITION	src/LitePositionProcessor.cpp	/^	const int DD_POSITION              = 2699;$/;"	m	namespace:dammIds::position	file:
DD_POSITION	src/PositionProcessor.cpp	/^        const int DD_POSITION              = 399;$/;"	m	namespace:dammIds::position	file:
DD_POSITION__ENERGY_DETX	src/SsdProcessor.cpp	/^        const int DD_POSITION__ENERGY_DETX = 1; \/\/ for x detectors$/;"	m	namespace:dammIds::ssd	file:
DD_POSITION__ENERGY_LOCX	src/LitePositionProcessor.cpp	/^	const int DD_POSITION__ENERGY_LOCX = 2680;$/;"	m	namespace:dammIds::position	file:
DD_POSITION__ENERGY_LOCX	src/PositionProcessor.cpp	/^        const int DD_POSITION__ENERGY_LOCX = 380;$/;"	m	namespace:dammIds::position	file:
DD_POSXY	src/McpProcessor.cpp	/^        const int DD_POSXY = 3;$/;"	m	namespace:dammIds::mcp	file:
DD_PROBLEMS	src/PulserProcessor.cpp	/^      const int DD_PROBLEMS    = 13; $/;"	m	namespace:dammIds::pulser	file:
DD_PROBLEMS	src/VandleProcessor.cpp	/^	const int DD_PROBLEMS    = 1+MISC_OFFSET;$/;"	m	namespace:dammIds::vandle	file:
DD_PVSP	src/PulserProcessor.cpp	/^      const int DD_PVSP        = 4; $/;"	m	namespace:dammIds::pulser	file:
DD_PVSP	src/VandleProcessor.cpp	/^	const int DD_PVSP        = 4  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_QDC	src/PulserProcessor.cpp	/^      const int DD_QDC         = 2; $/;"	m	namespace:dammIds::pulser	file:
DD_QDC1R__POS_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDC1R__POS_LOCX       = 460;$/;"	m	namespace:dammIds::position	file:
DD_QDC2R__POS_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDC2R__POS_LOCX       = 480;$/;"	m	namespace:dammIds::position	file:
DD_QDC3R__POS_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDC3R__POS_LOCX       = 500;$/;"	m	namespace:dammIds::position	file:
DD_QDC4R__POS_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDC4R__POS_LOCX       = 520;$/;"	m	namespace:dammIds::position	file:
DD_QDCN__QDCN_LOCX	src/LitePositionProcessor.cpp	/^	const int DD_QDCN__QDCN_LOCX       = 2500;$/;"	m	namespace:dammIds::position	file:
DD_QDCN__QDCN_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDCN__QDCN_LOCX       = 200;$/;"	m	namespace:dammIds::position	file:
DD_QDCR2__QDCR1_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDCR2__QDCR1_LOCX     = 400;$/;"	m	namespace:dammIds::position	file:
DD_QDCR2__QDCR3_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDCR2__QDCR3_LOCX     = 420;$/;"	m	namespace:dammIds::position	file:
DD_QDCR2__QDCR4_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDCR2__QDCR4_LOCX     = 440;$/;"	m	namespace:dammIds::position	file:
DD_QDCSUM__ENERGY_LOCX	src/LitePositionProcessor.cpp	/^	const int DD_QDCSUM__ENERGY_LOCX   = 4500;$/;"	m	namespace:dammIds::position	file:
DD_QDCTOT__QDCTOT_LOCX	src/LitePositionProcessor.cpp	/^	const int DD_QDCTOT__QDCTOT_LOCX   = 2660;$/;"	m	namespace:dammIds::position	file:
DD_QDCTOT__QDCTOT_LOCX	src/PositionProcessor.cpp	/^        const int DD_QDCTOT__QDCTOT_LOCX   = 360;$/;"	m	namespace:dammIds::position	file:
DD_QDCVSMAX	src/PulserProcessor.cpp	/^      const int DD_QDCVSMAX    = 6; $/;"	m	namespace:dammIds::pulser	file:
DD_QDCVSMAX	src/VandleProcessor.cpp	/^	const int DD_QDCVSMAX    = 6  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
DD_REJECTED_TRACE	include/DammPlotIds.hpp	/^        const int DD_REJECTED_TRACE   = 5;$/;"	m	namespace:dammIds::trace
DD_RUNTIME_LOGIC	src/TriggerLogicProcessor.cpp	/^        const int DD_RUNTIME_LOGIC = 80;$/;"	m	namespace:dammIds::triggerlogic	file:
DD_RUNTIME_MSEC	include/DammPlotIds.hpp	/^        const int DD_RUNTIME_MSEC      = 1810;$/;"	m	namespace:dammIds::raw
DD_RUNTIME_SEC	include/DammPlotIds.hpp	/^        const int DD_RUNTIME_SEC       = 1806;$/;"	m	namespace:dammIds::raw
DD_TDIFFVSCORTOF	src/VandleProcessor.cpp	/^	const int DD_TDIFFVSCORTOF     = 12;$/;"	m	namespace:dammIds::vandle	file:
DD_TDIFFVSTOF	src/VandleProcessor.cpp	/^	const int DD_TDIFFVSTOF       = 8;$/;"	m	namespace:dammIds::vandle	file:
DD_TDIFF__BETA_ENERGY	src/GeProcessor.cpp	/^	    const int DD_TDIFF__BETA_ENERGY  = 106;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_TDIFF__GAMMA_ENERGY	src/GeProcessor.cpp	/^	    const int DD_TDIFF__GAMMA_ENERGY = 105;$/;"	m	namespace:dammIds::ge::betaGated	file:
DD_TIMEDIFFBARS	src/VandleProcessor.cpp	/^	const int DD_TIMEDIFFBARS     = 2;$/;"	m	namespace:dammIds::vandle	file:
DD_TOFBARBVSBARA	src/VandleProcessor.cpp	/^	const int DD_TOFBARBVSBARA      = 2+MISC_OFFSET;$/;"	m	namespace:dammIds::vandle	file:
DD_TOFBARS	src/VandleProcessor.cpp	/^	const int DD_TOFBARS          = 3;$/;"	m	namespace:dammIds::vandle	file:
DD_TOFBARS_VETO	src/VandleProcessor.cpp	/^	const int DD_TOFBARS_VETO  = 26;$/;"	m	namespace:dammIds::vandle	file:
DD_TOFLIQUID	src/ScintProcessor.cpp	/^	const int DD_TOFLIQUID        = 14;$/;"	m	namespace:dammIds::scint	file:
DD_TOFVSDISCRIM	src/ScintProcessor.cpp	/^	const int DD_TOFVSDISCRIM     = 18;$/;"	m	namespace:dammIds::scint	file:
DD_TOFVSSTARTQDCSUM	src/VandleProcessor.cpp	/^	const int DD_TOFVSSTARTQDCSUM    = 23;$/;"	m	namespace:dammIds::vandle	file:
DD_TOTENERGY__ENERGY	src/ImplantSsdProcessor.cpp	/^        const int DD_TOTENERGY__ENERGY         = 8;$/;"	m	namespace:dammIds::implantSsd	file:
DD_TQDCAVEVSCORTOF	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSCORTOF   = 15;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCAVEVSENERGY	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSENERGY   = 16;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCAVEVSSTARTQDCSUM	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSSTARTQDCSUM= 22;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCAVEVSTDIFF	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSTDIFF   = 7;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCAVEVSTOF	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSTOF     = 11;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCAVEVSTOF_VETO	src/VandleProcessor.cpp	/^	const int DD_TQDCAVEVSTOF_VETO= 25;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCBARS	src/VandleProcessor.cpp	/^	const int DD_TQDCBARS         = 0;$/;"	m	namespace:dammIds::vandle	file:
DD_TQDCBETA	src/ScintProcessor.cpp	/^        const int DD_TQDCBETA         = 9;$/;"	m	namespace:dammIds::scint	file:
DD_TQDCLIQUID	src/ScintProcessor.cpp	/^        const int DD_TQDCLIQUID       = 11;$/;"	m	namespace:dammIds::scint	file:
DD_TQDCVSDISCRIM	src/ScintProcessor.cpp	/^	const int DD_TQDCVSDISCRIM    = 16;$/;"	m	namespace:dammIds::scint	file:
DD_TQDCVSENERGY	src/ScintProcessor.cpp	/^	const int DD_TQDCVSENERGY     = 24;$/;"	m	namespace:dammIds::scint	file:
DD_TQDCVSLIQTOF	src/ScintProcessor.cpp	/^	const int DD_TQDCVSLIQTOF     = 22;$/;"	m	namespace:dammIds::scint	file:
DD_TRACE	include/DammPlotIds.hpp	/^        const int DD_TRACE = 0;$/;"	m	namespace:dammIds::trace
DD_TRACES	src/FittingAnalyzer.cpp	/^      const int DD_TRACES     = 0;$/;"	m	namespace:dammIds::waveformanalyzer	file:
DD_TRCLIQUID	src/ScintProcessor.cpp	/^	const int DD_TRCLIQUID        = 15;$/;"	m	namespace:dammIds::scint	file:
DD_TRIPLE_TRACE	include/DammPlotIds.hpp	/^        const int DD_TRIPLE_TRACE         = 30;$/;"	m	namespace:dammIds::trace
DD_TRIPLE_TRACE_FILTER1	include/DammPlotIds.hpp	/^        const int DD_TRIPLE_TRACE_FILTER1 = 31;$/;"	m	namespace:dammIds::trace
DD_TRIPLE_TRACE_FILTER2	include/DammPlotIds.hpp	/^        const int DD_TRIPLE_TRACE_FILTER2 = 32;$/;"	m	namespace:dammIds::trace
DD_TRIPLE_TRACE_FILTER3	include/DammPlotIds.hpp	/^        const int DD_TRIPLE_TRACE_FILTER3 = 33;$/;"	m	namespace:dammIds::trace
DD_VETO_ENERGY__TOFX	src/ImplantSsdProcessor.cpp	/^        const int DD_VETO_ENERGY__TOFX        = 80;$/;"	m	namespace:dammIds::implantSsd	file:
DD_VETO_ENERGY__TX	src/ImplantSsdProcessor.cpp	/^        const int DD_VETO_ENERGY__TX          = 40;$/;"	m	namespace:dammIds::implantSsd	file:
DECAY_EVENT	include/Correlator.hpp	/^		      PROTON_EVENT, DECAY_EVENT, PROJECTILE_EVENT, GAMMA_EVENT,$/;"	e	enum:EventInfo::EEventTypes
DECAY_TOO_LATE	include/Correlator.hpp	/^		      DECAY_TOO_LATE       = 48,$/;"	e	enum:Correlator::EConditions
DEFINE_ALIASED_PAIR	include/AliasedPair.hpp	17;"	d
DETECTORDRIVERO	Makefile	/^DETECTORDRIVERO  = DetectorDriver.$(ObjSuf)$/;"	m
DETECTORLIBRARYO	Makefile	/^DETECTORLIBRARYO = DetectorLibrary.$(ObjSuf)$/;"	m
DOUBLETRACEO	Makefile	/^DOUBLETRACEO     = DoubleTraceAnalyzer.$(ObjSuf)$/;"	m
DSP_CLOCK_MHZ	include/pixie16app_defs.h	152;"	d
DSP_CLOCK_MHZ	include/pixie16app_defs.h	154;"	d
DSP_EMBUFFER_END_ADDR	include/pixie16app_defs.h	192;"	d
DSP_EMBUFFER_END_ADDR	include/pixie16app_defs.h	194;"	d
DSP_EMBUFFER_START_ADDR	include/pixie16app_defs.h	190;"	d
DSP_IMBUFFER_END_ADDR	include/pixie16app_defs.h	188;"	d
DSP_IMBUFFER_START_ADDR	include/pixie16app_defs.h	187;"	d
DSP_IO_BORDER	include/pixie16app_defs.h	139;"	d
DSSDPROCESSORO	Makefile	/^DSSDPROCESSORO   = DssdProcessor.$(ObjSuf)$/;"	m
D_ADD_ENERGY	src/GeProcessor.cpp	/^	    const int D_ADD_ENERGY         = 60; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ADD_ENERGY	src/GeProcessor.cpp	/^	const int D_ADD_ENERGY          = 50; $/;"	m	namespace:dammIds::ge	file:
D_ADD_ENERGY_CLOVERX	src/GeProcessor.cpp	/^	    const int D_ADD_ENERGY_CLOVERX = 61; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ADD_ENERGY_CLOVERX	src/GeProcessor.cpp	/^	const int D_ADD_ENERGY_CLOVERX  = 51;$/;"	m	namespace:dammIds::ge	file:
D_ADD_ENERGY_TOTAL	src/GeProcessor.cpp	/^	    const int D_ADD_ENERGY_TOTAL   = 65; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ADD_ENERGY_TOTAL	src/GeProcessor.cpp	/^	const int D_ADD_ENERGY_TOTAL    = 55;$/;"	m	namespace:dammIds::ge	file:
D_BUFFER_END_TIME	include/DammPlotIds.hpp	/^        const int D_BUFFER_END_TIME    = 1805;$/;"	m	namespace:dammIds::raw
D_CAL_ENERGY	include/DammPlotIds.hpp	/^        const int D_CAL_ENERGY = 1000;$/;"	m	namespace:dammIds::raw
D_CAL_ENERGY_REJECT	include/DammPlotIds.hpp	/^        const int D_CAL_ENERGY_REJECT = 1200;$/;"	m	namespace:dammIds::raw
D_CHISQPERDOF	src/FittingAnalyzer.cpp	/^      const int D_CHISQPERDOF = 1;$/;"	m	namespace:dammIds::waveformanalyzer	file:
D_CONDITION	src/Correlator.cpp	/^        const int D_CONDITION            = 0;$/;"	m	namespace:dammIds::correlator	file:
D_COUNTER	src/MtcProcessor.cpp	/^        const int D_COUNTER       = 10;$/;"	m	namespace:dammIds::mtc	file:
D_COUNTER_MOVE0	src/MtcProcessor.cpp	/^        const int D_COUNTER_MOVE0 = 11;$/;"	m	namespace:dammIds::mtc	file:
D_COUNTER_MOVE1	src/MtcProcessor.cpp	/^        const int D_COUNTER_MOVE1 = 12;$/;"	m	namespace:dammIds::mtc	file:
D_COUNTER_START	src/LogicProcessor.cpp	/^        const int D_COUNTER_START = 0;$/;"	m	namespace:dammIds::logic	file:
D_COUNTER_STOP	src/LogicProcessor.cpp	/^        const int D_COUNTER_STOP  = 5;$/;"	m	namespace:dammIds::logic	file:
D_CROSSTALK	src/VandleProcessor.cpp	/^	const int D_CROSSTALK           = 4+MISC_OFFSET;$/;"	m	namespace:dammIds::vandle	file:
D_DTIME_DETX	include/IonChamberProcessor.hpp	/^    const int D_DTIME_DETX    = 3230; \/\/ + detector num$/;"	m	namespace:dammIds::ionChamber
D_ENERGY	src/GeProcessor.cpp	/^	    const int D_ENERGY             = 10;$/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY	src/GeProcessor.cpp	/^	const int D_ENERGY              = 0;$/;"	m	namespace:dammIds::ge	file:
D_ENERGY1	include/DammPlotIds.hpp	/^        const int D_ENERGY1           = 15;$/;"	m	namespace:dammIds::trace
D_ENERGY2	include/DammPlotIds.hpp	/^        const int D_ENERGY2           = 16;	$/;"	m	namespace:dammIds::trace
D_ENERGYSUM	include/IonChamberProcessor.hpp	/^    const int D_ENERGYSUM     = 3200;$/;"	m	namespace:dammIds::ionChamber
D_ENERGYTHREE_GROUPX	include/IonChamberProcessor.hpp	/^    const int D_ENERGYTHREE_GROUPX = 3210; \/\/ + starting det$/;"	m	namespace:dammIds::ionChamber
D_ENERGYTWO_GROUPX	include/IonChamberProcessor.hpp	/^    const int D_ENERGYTWO_GROUPX   = 3220; \/\/ + starting det$/;"	m	namespace:dammIds::ionChamber
D_ENERGY_BETA0	src/GeProcessor.cpp	/^	    const int D_ENERGY_BETA0       = 15; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY_BETA1	src/GeProcessor.cpp	/^	    const int D_ENERGY_BETA1       = 16; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY_CLOVERX	src/GeProcessor.cpp	/^	    const int D_ENERGY_CLOVERX     = 11;$/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY_CLOVERX	src/GeProcessor.cpp	/^	const int D_ENERGY_CLOVERX      = 1; \/\/ leaf by clover for X detectors$/;"	m	namespace:dammIds::ge	file:
D_ENERGY_DETX	src/ScintProcessor.cpp	/^                const int D_ENERGY_DETX = 0; \/\/ for 3 detectors (1-3)$/;"	m	namespace:dammIds::scint::neutr::betaGated	file:
D_ENERGY_DETX	src/ScintProcessor.cpp	/^                const int D_ENERGY_DETX = 3; \/\/ for 3 detectors (1-3)$/;"	m	namespace:dammIds::scint::neutr::gammaGated	file:
D_ENERGY_DETX	src/ScintProcessor.cpp	/^                const int D_ENERGY_DETX = 6; \/\/ for 3 detectors (1-3)$/;"	m	namespace:dammIds::scint::neutr::betaGammaGated	file:
D_ENERGY_HIGHGAIN	src/GeProcessor.cpp	/^	const int D_ENERGY_HIGHGAIN     = 8;$/;"	m	namespace:dammIds::ge	file:
D_ENERGY_LOWGAIN	src/GeProcessor.cpp	/^	const int D_ENERGY_LOWGAIN      = 7;$/;"	m	namespace:dammIds::ge	file:
D_ENERGY_WITH_DECAY	src/GeProcessor.cpp	/^	const int D_ENERGY_WITH_DECAY   = 20;$/;"	m	namespace:dammIds::ge	file:
D_ENERGY_WITH_EXT0	src/GeProcessor.cpp	/^	    const int D_ENERGY_WITH_EXT0   = 36; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY_WITH_EXT0	src/GeProcessor.cpp	/^	const int D_ENERGY_WITH_EXT0    = 26; \/\/ with external detector (e.g. 3hen, vandle) $/;"	m	namespace:dammIds::ge	file:
D_ENERGY_WITH_EXT1	src/GeProcessor.cpp	/^	    const int D_ENERGY_WITH_EXT1   = 37; $/;"	m	namespace:dammIds::ge::betaGated	file:
D_ENERGY_WITH_EXT1	src/GeProcessor.cpp	/^	const int D_ENERGY_WITH_EXT1    = 27; \/\/ with external detector (e.g. 3hen, vandle) $/;"	m	namespace:dammIds::ge	file:
D_ENERGY_WITH_IMPLANT	src/GeProcessor.cpp	/^	const int D_ENERGY_WITH_IMPLANT = 25;$/;"	m	namespace:dammIds::ge	file:
D_EVENT_GAP	include/DammPlotIds.hpp	/^        const int D_EVENT_GAP    = 1803;$/;"	m	namespace:dammIds::raw
D_EVENT_LENGTH	include/DammPlotIds.hpp	/^        const int D_EVENT_LENGTH = 1802;$/;"	m	namespace:dammIds::raw
D_EVENT_MULTIPLICITY	include/DammPlotIds.hpp	/^        const int D_EVENT_MULTIPLICITY = 1804;$/;"	m	namespace:dammIds::raw
D_FAST_DECAY_TRACE	src/ImplantSsdProcessor.cpp	/^        const int D_FAST_DECAY_TRACE  = 100;$/;"	m	namespace:dammIds::implantSsd	file:
D_FILTER_ENERGY	include/DammPlotIds.hpp	/^        const int D_FILTER_ENERGY = 200; \/\/ intermediate step with "raw" filter energy	$/;"	m	namespace:dammIds::raw
D_HAS_TRACE	include/DammPlotIds.hpp	/^        const int D_HAS_TRACE = 800;$/;"	m	namespace:dammIds::raw
D_HIGH_ENERGY_TRACE	src/ImplantSsdProcessor.cpp	/^        const int D_HIGH_ENERGY_TRACE = 200;$/;"	m	namespace:dammIds::implantSsd	file:
D_HIT_SPECTRUM	include/DammPlotIds.hpp	/^        const int D_HIT_SPECTRUM = 1800; \/**< This is actually id 1801 in the .his file *\/$/;"	m	namespace:dammIds::raw
D_INFO_LOCX	src/LitePositionProcessor.cpp	/^	const int D_INFO_LOCX              = 2480;$/;"	m	namespace:dammIds::position	file:
D_INFO_LOCX	src/PositionProcessor.cpp	/^        const int D_INFO_LOCX              = 180;$/;"	m	namespace:dammIds::position	file:
D_MOVETIME	src/MtcProcessor.cpp	/^        const int D_MOVETIME      = 3;$/;"	m	namespace:dammIds::mtc	file:
D_MULT	src/GeProcessor.cpp	/^	const int D_MULT                = 9;$/;"	m	namespace:dammIds::ge	file:
D_NUMBER_OF_EVENTS	include/DammPlotIds.hpp	/^        const int D_NUMBER_OF_EVENTS   = 1811;$/;"	m	namespace:dammIds::raw
D_PHASE	src/FittingAnalyzer.cpp	/^      const int D_PHASE       = 2;$/;"	m	namespace:dammIds::waveformanalyzer	file:
D_POSX	src/McpProcessor.cpp	/^        const int D_POSX   = 1;$/;"	m	namespace:dammIds::mcp	file:
D_POSY	src/McpProcessor.cpp	/^        const int D_POSY   = 2;$/;"	m	namespace:dammIds::mcp	file:
D_PROBLEMS	src/VandleProcessor.cpp	/^	const int D_PROBLEMS     = 0+MISC_OFFSET;$/;"	m	namespace:dammIds::vandle	file:
D_PROBLEMSTUFF	src/PulserProcessor.cpp	/^      const int D_PROBLEMSTUFF = 1; $/;"	m	namespace:dammIds::pulser	file:
D_QDCNORMN_LOCX	src/LitePositionProcessor.cpp	/^	const int D_QDCNORMN_LOCX          = 2300;$/;"	m	namespace:dammIds::position	file:
D_QDCNORMN_LOCX	src/PositionProcessor.cpp	/^        const int D_QDCNORMN_LOCX          = 0;$/;"	m	namespace:dammIds::position	file:
D_QDCTOTNORM_LOCX	src/LitePositionProcessor.cpp	/^	const int D_QDCTOTNORM_LOCX        = 2460;$/;"	m	namespace:dammIds::position	file:
D_QDCTOTNORM_LOCX	src/PositionProcessor.cpp	/^        const int D_QDCTOTNORM_LOCX        = 160;$/;"	m	namespace:dammIds::position	file:
D_RATE_DETX	include/IonChamberProcessor.hpp	/^    const int D_RATE_DETX     = 3240; \/\/ + detector num$/;"	m	namespace:dammIds::ionChamber
D_RAW_ENERGY	include/DammPlotIds.hpp	/^        const int D_RAW_ENERGY = 0;$/;"	m	namespace:dammIds::raw
D_SCALAR	include/DammPlotIds.hpp	/^        const int D_SCALAR = 400;\/**< These get filled in PixieStd.cpp *\/$/;"	m	namespace:dammIds::raw
D_SDEVBASESTART	src/PulserProcessor.cpp	/^      const int D_SDEVBASESTART= 11; $/;"	m	namespace:dammIds::pulser	file:
D_SDEVBASESTART	src/VandleProcessor.cpp	/^	const int D_SDEVBASESTART= 11 + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
D_SDEVBASESTOP	src/PulserProcessor.cpp	/^      const int D_SDEVBASESTOP = 12; $/;"	m	namespace:dammIds::pulser	file:
D_SDEVBASESTOP	src/VandleProcessor.cpp	/^	const int D_SDEVBASESTOP = 12 + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
D_SNRSTART	src/PulserProcessor.cpp	/^      const int D_SNRSTART     = 9; $/;"	m	namespace:dammIds::pulser	file:
D_SNRSTART	src/VandleProcessor.cpp	/^	const int D_SNRSTART     = 9  + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
D_SNRSTOP	src/PulserProcessor.cpp	/^      const int D_SNRSTOP      = 10; $/;"	m	namespace:dammIds::pulser	file:
D_SNRSTOP	src/VandleProcessor.cpp	/^	const int D_SNRSTOP      = 10 + TVANDLE_OFFSET; $/;"	m	namespace:dammIds::tvandle	file:
D_SUBEVENT_GAP	include/DammPlotIds.hpp	/^        const int D_SUBEVENT_GAP = 1801; \/**< The rest follow the same pattern. *\/$/;"	m	namespace:dammIds::raw
D_TDIFF0	src/MtcProcessor.cpp	/^        const int D_TDIFF0        = 0;$/;"	m	namespace:dammIds::mtc	file:
D_TDIFF1	src/MtcProcessor.cpp	/^        const int D_TDIFF1        = 1;$/;"	m	namespace:dammIds::mtc	file:
D_TDIFFSUM	src/MtcProcessor.cpp	/^        const int D_TDIFFSUM      = 2;$/;"	m	namespace:dammIds::mtc	file:
D_TDIFF_FOIL_IMPLANT	src/ImplantSsdProcessor.cpp	/^        const int D_TDIFF_FOIL_IMPLANT = 11;$/;"	m	namespace:dammIds::implantSsd	file:
D_TDIFF_FOIL_IMPLANT_MULT1	src/ImplantSsdProcessor.cpp	/^        const int D_TDIFF_FOIL_IMPLANT_MULT1 = 12;$/;"	m	namespace:dammIds::implantSsd	file:
D_TDIFF_LENGTHX	src/LogicProcessor.cpp	/^        const int D_TDIFF_LENGTHX = 50;$/;"	m	namespace:dammIds::logic	file:
D_TDIFF_STARTX	src/LogicProcessor.cpp	/^        const int D_TDIFF_STARTX  = 10;$/;"	m	namespace:dammIds::logic	file:
D_TDIFF_STOPX	src/LogicProcessor.cpp	/^        const int D_TDIFF_STOPX   = 20;$/;"	m	namespace:dammIds::logic	file:
D_TDIFF_SUMX	src/LogicProcessor.cpp	/^        const int D_TDIFF_SUMX    = 30;$/;"	m	namespace:dammIds::logic	file:
D_TIME	include/DammPlotIds.hpp	/^        const int D_TIME = 600; \/**< These get filled in PixieStd.cpp *\/$/;"	m	namespace:dammIds::raw
D_TIMEDIFF	src/PulserProcessor.cpp	/^      const int D_TIMEDIFF     = 0; $/;"	m	namespace:dammIds::pulser	file:
D_TIMEDIFF	src/VandleProcessor.cpp	/^	const int D_TIMEDIFF     = 3  + TVANDLE_OFFSET;$/;"	m	namespace:dammIds::tvandle	file:
D_TIME_BW_ALL_IMPLANTS	src/Correlator.cpp	/^        const int D_TIME_BW_ALL_IMPLANTS = 2;$/;"	m	namespace:dammIds::correlator	file:
D_TIME_BW_IMPLANTS	src/Correlator.cpp	/^        const int D_TIME_BW_IMPLANTS     = 1;$/;"	m	namespace:dammIds::correlator	file:
D_TOF	src/VandleProcessor.cpp	/^	const int D_TOF               = 6;$/;"	m	namespace:dammIds::vandle	file:
D_TRACE	include/DammPlotIds.hpp	/^        const int D_TRACE = 50;$/;"	m	namespace:dammIds::trace
Data	include/IonChamberProcessor.hpp	/^  struct Data {$/;"	s	class:IonChamberProcessor
DataRoot	include/TimingInformation.hpp	/^    struct DataRoot$/;"	s	class:TimingInformation
DataRoot	src/TimingInformation.cpp	/^TimingInformation::DataRoot::DataRoot(void) $/;"	f	class:TimingInformation::DataRoot
DeclareHistogram1D	include/Correlator.hpp	/^    virtual void DeclareHistogram1D(int dammId, int xSize, const char* title) {$/;"	f	class:Correlator
DeclareHistogram1D	include/DetectorDriver.hpp	/^    virtual void DeclareHistogram1D(int dammId, int xSize, const char* title) {$/;"	f	class:DetectorDriver
DeclareHistogram1D	include/EventProcessor.hpp	/^    virtual void DeclareHistogram1D(int dammId, int xSize, const char* title) {$/;"	f	class:EventProcessor
DeclareHistogram1D	include/TraceAnalyzer.hpp	/^    virtual void DeclareHistogram1D(int dammId, int xSize, const char* title) {$/;"	f	class:TraceAnalyzer
DeclareHistogram1D	src/Plots.cpp	/^bool Plots::DeclareHistogram1D(int dammId, int xSize, const char* title,$/;"	f	class:Plots
DeclareHistogram2D	include/Correlator.hpp	/^    virtual void DeclareHistogram2D(int dammId, int xSize, int ySize, const char* title) {$/;"	f	class:Correlator
DeclareHistogram2D	include/DetectorDriver.hpp	/^    virtual void DeclareHistogram2D(int dammId, int xSize, int ySize, const char* title) {$/;"	f	class:DetectorDriver
DeclareHistogram2D	include/EventProcessor.hpp	/^    virtual void DeclareHistogram2D(int dammId, int xSize, int ySize, const char* title) {$/;"	f	class:EventProcessor
DeclareHistogram2D	include/TraceAnalyzer.hpp	/^    virtual void DeclareHistogram2D(int dammId, int xSize, int ySize, const char* title) {$/;"	f	class:TraceAnalyzer
DeclareHistogram2D	src/Plots.cpp	/^bool Plots::DeclareHistogram2D(int dammId, int xSize, int ySize,$/;"	f	class:Plots
DeclareHistogramGranY	src/GeProcessor.cpp	/^void GeProcessor::DeclareHistogramGranY(int dammId, int xsize, int ysize,$/;"	f	class:GeProcessor
DeclarePlots	src/CfdAnalyzer.cpp	/^void CfdAnalyzer::DeclarePlots (void) const $/;"	f	class:CfdAnalyzer
DeclarePlots	src/Correlator.cpp	/^void Correlator::DeclarePlots()$/;"	f	class:Correlator
DeclarePlots	src/DetectorDriver.cpp	/^void DetectorDriver::DeclarePlots(void)$/;"	f	class:DetectorDriver
DeclarePlots	src/DoubleTraceAnalyzer.cpp	/^void DoubleTraceAnalyzer::DeclarePlots()$/;"	f	class:DoubleTraceAnalyzer
DeclarePlots	src/DssdProcessor.cpp	/^void DssdProcessor::DeclarePlots(void)$/;"	f	class:DssdProcessor
DeclarePlots	src/EventProcessor.cpp	/^void EventProcessor::DeclarePlots(void)$/;"	f	class:EventProcessor
DeclarePlots	src/FittingAnalyzer.cpp	/^void FittingAnalyzer::DeclarePlots(void)$/;"	f	class:FittingAnalyzer
DeclarePlots	src/GeProcessor.cpp	/^void GeProcessor::DeclarePlots(void) $/;"	f	class:GeProcessor
DeclarePlots	src/ImplantSsdProcessor.cpp	/^void ImplantSsdProcessor::DeclarePlots(void)$/;"	f	class:ImplantSsdProcessor
DeclarePlots	src/IonChamberProcessor.cpp	/^void IonChamberProcessor::DeclarePlots(void)$/;"	f	class:IonChamberProcessor
DeclarePlots	src/LitePositionProcessor.cpp	/^void LitePositionProcessor::DeclarePlots(void)$/;"	f	class:LitePositionProcessor
DeclarePlots	src/LogicProcessor.cpp	/^void LogicProcessor::DeclarePlots(void)$/;"	f	class:LogicProcessor
DeclarePlots	src/McpProcessor.cpp	/^void McpProcessor::DeclarePlots(void)$/;"	f	class:McpProcessor
DeclarePlots	src/MtcProcessor.cpp	/^void MtcProcessor::DeclarePlots(void)$/;"	f	class:MtcProcessor
DeclarePlots	src/PositionProcessor.cpp	/^void PositionProcessor::DeclarePlots() {$/;"	f	class:PositionProcessor
DeclarePlots	src/PulserProcessor.cpp	/^void PulserProcessor::DeclarePlots(void)$/;"	f	class:PulserProcessor
DeclarePlots	src/ScintProcessor.cpp	/^void ScintProcessor::DeclarePlots(void)$/;"	f	class:ScintProcessor
DeclarePlots	src/SsdProcessor.cpp	/^void SsdProcessor::DeclarePlots(void)$/;"	f	class:SsdProcessor
DeclarePlots	src/TraceAnalyzer.cpp	/^void TraceAnalyzer::DeclarePlots()$/;"	f	class:TraceAnalyzer
DeclarePlots	src/TraceExtracter.cpp	/^void TraceExtracter::DeclarePlots(void)$/;"	f	class:TraceExtracter
DeclarePlots	src/TraceFilterer.cpp	/^void TraceFilterer::DeclarePlots(void)$/;"	f	class:TraceFilterer
DeclarePlots	src/TracePlotter.cpp	/^void TracePlotter::DeclarePlots(void)$/;"	f	class:TracePlotter
DeclarePlots	src/TriggerLogicProcessor.cpp	/^void TriggerLogicProcessor::DeclarePlots(void)$/;"	f	class:TriggerLogicProcessor
DeclarePlots	src/VandleProcessor.cpp	/^void VandleProcessor::DeclarePlots(void)$/;"	f	class:VandleProcessor
DeclarePlots	src/WaveformAnalyzer.cpp	/^void WaveformAnalyzer::DeclarePlots(void) const$/;"	f	class:WaveformAnalyzer
DetectorDriver	include/DetectorDriver.hpp	/^class DetectorDriver {    $/;"	c
DetectorDriver	src/DetectorDriver.cpp	/^DetectorDriver::DetectorDriver() : $/;"	f	class:DetectorDriver
DetectorLibrary	include/DetectorLibrary.hpp	/^class DetectorLibrary : public std::vector<Identifier>$/;"	c
DetectorLibrary	src/DetectorLibrary.cpp	/^DetectorLibrary::DetectorLibrary() : vector<Identifier>(), locations()$/;"	f	class:DetectorLibrary
DetectorSummary	include/RawEvent.hpp	/^class DetectorSummary$/;"	c
DetectorSummary	src/RawEvent.cpp	/^DetectorSummary::DetectorSummary()$/;"	f	class:DetectorSummary
DetectorSummary	src/RawEvent.cpp	/^DetectorSummary::DetectorSummary(const string &str, $/;"	f	class:DetectorSummary
DidProcess	include/EventProcessor.hpp	/^    virtual bool DidProcess(void) const {$/;"	f	class:EventProcessor
DoBaseline	src/Trace.cpp	/^double Trace::DoBaseline(unsigned int lo, unsigned int numBins)$/;"	f	class:Trace
DoDiscrimination	src/Trace.cpp	/^unsigned int Trace::DoDiscrimination(unsigned int lo, unsigned int numBins)$/;"	f	class:Trace
DoQDC	src/Trace.cpp	/^unsigned int Trace::DoQDC(unsigned int lo, unsigned int numBins) $/;"	f	class:Trace
DoStatisticsBlock	src/StatsData.cpp	/^void StatsData::DoStatisticsBlock(word_t *buf, int vsn)$/;"	f	class:StatsData
DoubleTraceAnalyzer	include/DoubleTraceAnalyzer.hpp	/^class DoubleTraceAnalyzer : public TraceFilterer$/;"	c
DoubleTraceAnalyzer	src/DoubleTraceAnalyzer.cpp	/^DoubleTraceAnalyzer::DoubleTraceAnalyzer() : $/;"	f	class:DoubleTraceAnalyzer
DssdProcessor	include/DssdProcessor.hpp	/^class DssdProcessor : public EventProcessor $/;"	c
DssdProcessor	src/DssdProcessor.cpp	/^DssdProcessor::DssdProcessor() : $/;"	f	class:DssdProcessor
EConditions	include/Correlator.hpp	/^    enum EConditions {INVALID_LOCATION     = 4,$/;"	g	class:Correlator
EEventTypes	include/Correlator.hpp	/^    enum EEventTypes {IMPLANT_EVENT, ALPHA_EVENT, BETA_EVENT, FISSION_EVENT, $/;"	g	struct:EventInfo
EInfo	src/PositionProcessor.cpp	/^	enum EInfo {INFO_OKAY = 0,$/;"	g	namespace:dammIds::position	file:
EM_PINGPONGBUFA_ADDR	include/pixie16app_defs.h	198;"	d
EM_PINGPONGBUFB_ADDR	include/pixie16app_defs.h	199;"	d
ENABLE_INPUT	include/pixie16app_defs.h	318;"	d
ERROR	include/Globals.hpp	/^    const int ERROR = -100;$/;"	m	namespace:readbuff
EVENTPROCESSORO	Makefile	/^EVENTPROCESSORO  = EventProcessor.$(ObjSuf)$/;"	m
EVENT_CONTINUE	src/PixieStd.cpp	/^enum HistoPoints {BUFFER_START, BUFFER_END, EVENT_START = 10, EVENT_CONTINUE};$/;"	e	enum:HistoPoints	file:
EVENT_HEAD_LENGTH	include/pixie16app_defs.h	210;"	d
EVENT_INFO_HEADER_LENGTH	include/pixie16app_defs.h	215;"	d
EVENT_INFO_LENGTH	include/pixie16app_defs.h	213;"	d
EVENT_START	src/PixieStd.cpp	/^enum HistoPoints {BUFFER_START, BUFFER_END, EVENT_START = 10, EVENT_CONTINUE};$/;"	e	enum:HistoPoints	file:
EXTDELAYLEN_MAX	include/pixie16app_defs.h	256;"	d
EXTDELAYLEN_MIN	include/pixie16app_defs.h	257;"	d
EXTENDED_FASTFILTER_LEN	include/pixie16app_defs.h	84;"	d
EXTERNAL_FIFO_LENGTH	include/pixie16app_defs.h	207;"	d
EXTFIFO_READ_THRESH	include/pixie16app_defs.h	307;"	d
EXTTRIGSTRETCH_MAX	include/pixie16app_defs.h	247;"	d
EXTTRIGSTRETCH_MIN	include/pixie16app_defs.h	248;"	d
EndAnalyze	src/TraceAnalyzer.cpp	/^void TraceAnalyzer::EndAnalyze(Trace &trace)$/;"	f	class:TraceAnalyzer
EndAnalyze	src/TraceAnalyzer.cpp	/^void TraceAnalyzer::EndAnalyze(void)$/;"	f	class:TraceAnalyzer
EndProcess	src/EventProcessor.cpp	/^void EventProcessor::EndProcess(void)$/;"	f	class:EventProcessor
EventContainer	include/RawEvent.hpp	/^class EventContainer : public std::vector<ChanEvent *>$/;"	c
EventInfo	include/Correlator.hpp	/^struct EventInfo$/;"	s
EventInfo	src/Correlator.cpp	/^EventInfo::EventInfo()$/;"	f	class:EventInfo
EventProcessor	include/EventProcessor.hpp	/^class EventProcessor {$/;"	c
EventProcessor	src/EventProcessor.cpp	/^EventProcessor::EventProcessor() : $/;"	f	class:EventProcessor
EventProcessor	src/EventProcessor.cpp	/^EventProcessor::EventProcessor(int offset, int range) : $/;"	f	class:EventProcessor
Exists	src/Plots.cpp	/^bool Plots::Exists(const string &mne) const$/;"	f	class:Plots
Exists	src/Plots.cpp	/^bool Plots::Exists(int id) const$/;"	f	class:Plots
FASTFILTER_MAX_LEN	include/pixie16app_defs.h	223;"	d
FASTFILTER_MAX_LEN	include/pixie16app_defs.h	226;"	d
FASTFILTER_MAX_LEN	include/pixie16app_defs.h	228;"	d
FASTTRIGBACKDELAY_MAX	include/pixie16app_defs.h	259;"	d
FASTTRIGBACKDELAY_MIN	include/pixie16app_defs.h	260;"	d
FASTTRIGBACKLEN_MAX	include/pixie16app_defs.h	253;"	d
FASTTRIGBACKLEN_MIN	include/pixie16app_defs.h	254;"	d
FAST_THRESHOLD_MAX	include/pixie16app_defs.h	238;"	d
FAST_THRESHOLD_MAX	include/pixie16app_defs.h	240;"	d
FC	Makefile	/^FC        = g77$/;"	m
FC	Makefile	/^FC        = gfortran$/;"	m
FISSION_EVENT	include/Correlator.hpp	/^    enum EEventTypes {IMPLANT_EVENT, ALPHA_EVENT, BETA_EVENT, FISSION_EVENT, $/;"	e	enum:EventInfo::EEventTypes
FITTINGANALYZERO	Makefile	/^FITTINGANALYZERO = FittingAnalyzer.$(ObjSuf)$/;"	m
FillBranch	src/EventProcessor.cpp	/^void EventProcessor::FillBranch(void)$/;"	f	class:EventProcessor
FillBranch	src/IonChamberProcessor.cpp	/^void IonChamberProcessor::FillBranch(void)$/;"	f	class:IonChamberProcessor
FillBranch	src/McpProcessor.cpp	/^void McpProcessor::FillBranch(void)$/;"	f	class:McpProcessor
FillBranch	src/ScintROOT.cpp	/^void ScintROOT::FillBranch(void)$/;"	f	class:ScintROOT
FillBranch	src/VandleROOT.cpp	/^void VandleROOT::FillBranch(void)$/;"	f	class:VandleROOT
FillMap	src/VandleProcessor.cpp	/^void VandleProcessor::FillMap(const vector<ChanEvent*> &eventList, $/;"	f	class:VandleProcessor
FillRoot	src/ScintROOT.cpp	/^void ScintROOT::FillRoot(const TimingDataMap &detMap)$/;"	f	class:ScintROOT
FillRoot	src/VandleROOT.cpp	/^void VandleROOT::FillRoot(const TimingDataMap &endMap, const string &barType)$/;"	f	class:VandleROOT
FindMatchingEdge	src/LitePositionProcessor.cpp	/^ChanEvent* LitePositionProcessor::FindMatchingEdge(ChanEvent *match,$/;"	f	class:LitePositionProcessor
FindMatchingEdge	src/PositionProcessor.cpp	/^ChanEvent* PositionProcessor::FindMatchingEdge(ChanEvent *match,$/;"	f	class:PositionProcessor
FindMaxInfo	src/Trace.cpp	/^unsigned int Trace::FindMaxInfo(unsigned int lo, unsigned int numBins)$/;"	f	class:Trace
FindPulse	src/TraceFilterer.cpp	/^const TraceFilterer::PulseInfo& TraceFilterer::FindPulse(Trace::iterator begin, Trace::iterator end)$/;"	f	class:TraceFilterer
FitData	include/FittingAnalyzer.hpp	/^    struct FitData{$/;"	s	class:FittingAnalyzer
FitFunction	src/FittingAnalyzer.cpp	/^int FitFunction (const gsl_vector * x, void *FitData, $/;"	f
FitFunctionDerivative	src/FittingAnalyzer.cpp	/^int FitFunctionDerivative (const gsl_vector * x, void *FitData,$/;"	f
FittingAnalyzer	include/FittingAnalyzer.hpp	/^class FittingAnalyzer : public TraceAnalyzer,$/;"	c
FittingAnalyzer	src/FittingAnalyzer.cpp	/^FittingAnalyzer::FittingAnalyzer() : TraceAnalyzer(OFFSET,RANGE)$/;"	f	class:FittingAnalyzer
Flag	src/Correlator.cpp	/^void CorrelationList::Flag() $/;"	f	class:CorrelationList
Flag	src/Correlator.cpp	/^void Correlator::Flag(int fch, int bch) $/;"	f	class:Correlator
FreeMemory	src/FittingAnalyzer.cpp	/^void FittingAnalyzer::FreeMemory(void)$/;"	f	class:FittingAnalyzer
GAMMA_EVENT	include/Correlator.hpp	/^		      PROTON_EVENT, DECAY_EVENT, PROJECTILE_EVENT, GAMMA_EVENT,$/;"	e	enum:EventInfo::EEventTypes
GCC	Makefile	/^GCC       = gcc $/;"	m
GENERIC_CHANNEL	include/DammPlotIds.hpp	/^    const int GENERIC_CHANNEL = 10;$/;"	m	namespace:dammIds
GEPROCESSORO	Makefile	/^GEPROCESSORO     = GeProcessor.$(ObjSuf)$/;"	m
GET2CC	scan/set2cc.f	/^      SUBROUTINE GET2CC(/;"	s
GETARG__GETARGS	include/GetArguments.hpp	13;"	d
GETARG__GETARGS	include/GetArguments.hpp	16;"	d
GET_BASELINES	include/pixie16app_defs.h	322;"	d
GET_TRACES	include/pixie16app_defs.h	320;"	d
GGATES	Makefile	/^GGATES = 1$/;"	m
GGate	include/GeProcessor.hpp	/^        GGate() {$/;"	f	class:GGate
GGate	include/GeProcessor.hpp	/^class GGate {$/;"	c
GeProcessor	include/GeProcessor.hpp	/^class GeProcessor : public EventProcessor$/;"	c
GeProcessor	src/GeProcessor.cpp	/^GeProcessor::GeProcessor() : EventProcessor(OFFSET, RANGE), leafToClover() {$/;"	f	class:GeProcessor
GeneralException	include/NewCorrelator.hpp	/^    explicit GeneralException(const string& msg) $/;"	f	class:GeneralException
GeneralException	include/NewCorrelator.hpp	/^class GeneralException : public std::exception {$/;"	c
Generate	src/RandomPool.cpp	/^void RandomPool::Generate(void)$/;"	f	class:RandomPool
Get	src/RandomPool.cpp	/^double RandomPool::Get(double range)$/;"	f	class:RandomPool
GetArgument	include/GetArguments.hpp	/^inline void GetArgument(int i, char *arg, int length)$/;"	f
GetCalEnergy	include/RawEvent.hpp	/^    double GetCalEnergy() const   {return calEnergy;}   \/**< Get the calibrated energy *\/$/;"	f	class:ChanEvent
GetCalTime	include/RawEvent.hpp	/^    double GetCalTime() const     {return calTime;}    \/**< Get the calibrated time *\/$/;"	f	class:ChanEvent
GetChanID	src/RawEvent.cpp	/^const Identifier& ChanEvent::GetChanID() const$/;"	f	class:ChanEvent
GetCondition	include/Correlator.hpp	/^    EConditions GetCondition(void) const {$/;"	f	class:Correlator
GetConstant	src/TimingInformation.cpp	/^double TimingInformation::GetConstant(const string &name)$/;"	f	class:TimingInformation
GetCorrectedTime	include/RawEvent.hpp	/^    double GetCorrectedTime() const {return correctedTime;} \/**< Get the corrected time *\/$/;"	f	class:ChanEvent
GetCorrelator	include/RawEvent.hpp	/^    Correlator &GetCorrelator()$/;"	f	class:RawEvent
GetCurrTime	src/StatsData.cpp	/^double StatsData::GetCurrTime(unsigned int id) const$/;"	f	class:StatsData
GetDammID	include/RawEvent.hpp	/^    int GetDammID() const                 {return dammID;}   \/**< Get the dammid *\/$/;"	f	class:Identifier
GetDecayTime	src/Correlator.cpp	/^double CorrelationList::GetDecayTime() const$/;"	f	class:CorrelationList
GetDecayTime	src/Correlator.cpp	/^double Correlator::GetDecayTime(int fch, int bch) const$/;"	f	class:Correlator
GetDecayTime	src/Correlator.cpp	/^double Correlator::GetDecayTime(void) const$/;"	f	class:Correlator
GetDiffPeaks	src/StatsData.cpp	/^double StatsData::GetDiffPeaks(unsigned int id) const$/;"	f	class:StatsData
GetDiffTime	src/StatsData.cpp	/^double StatsData::GetDiffTime(unsigned int id) const$/;"	f	class:StatsData
GetEnergy	include/RawEvent.hpp	/^    double GetEnergy() const      {return energy;}      \/**< Get the raw energy *\/$/;"	f	class:ChanEvent
GetEventList	include/RawEvent.hpp	/^    const std::vector<ChanEvent *> &GetEventList(void) const$/;"	f	class:RawEvent
GetEventTime	include/RawEvent.hpp	/^    double GetEventTime() const   {return eventTime;}  \/**< Get the event time *\/$/;"	f	class:ChanEvent
GetEventTimeHi	include/RawEvent.hpp	/^    unsigned long GetEventTimeHi() const$/;"	f	class:ChanEvent
GetEventTimeLo	include/RawEvent.hpp	/^    unsigned long GetEventTimeLo() const$/;"	f	class:ChanEvent
GetGapSamples	include/Trace.hpp	/^    Trace::size_type GetGapSamples(void) const  {return gapSamples;}$/;"	f	class:TrapezoidalFilterParameters
GetHighResTime	include/RawEvent.hpp	/^    double GetHighResTime() const {return highResTime;} \/**< Get the high-resolution time *\/$/;"	f	class:ChanEvent
GetID	src/RawEvent.cpp	/^int ChanEvent::GetID() const $/;"	f	class:ChanEvent
GetImplantTime	src/Correlator.cpp	/^double CorrelationList::GetImplantTime() const$/;"	f	class:CorrelationList
GetImplantTime	src/Correlator.cpp	/^double Correlator::GetImplantTime(int fch, int bch) const$/;"	f	class:Correlator
GetImplantTime	src/Correlator.cpp	/^double Correlator::GetImplantTime(void) const$/;"	f	class:Correlator
GetIndex	src/DetectorLibrary.cpp	/^DetectorLibrary::size_type DetectorLibrary::GetIndex(int mod, int chan) const$/;"	f	class:DetectorLibrary
GetKnownDetectors	src/DetectorLibrary.cpp	/^const set<string>& DetectorLibrary::GetKnownDetectors(void)$/;"	f	class:DetectorLibrary
GetLevel	include/TraceAnalyzer.hpp	/^    int  GetLevel() {return level;}$/;"	f	class:TraceAnalyzer
GetList	include/RawEvent.hpp	/^    const std::vector<ChanEvent*>& GetList() const $/;"	f	class:DetectorSummary
GetLocation	include/RawEvent.hpp	/^    int GetLocation() const               {return location;} \/**< Get the detector location *\/$/;"	f	class:Identifier
GetLocations	src/DetectorLibrary.cpp	/^const set<int>& DetectorLibrary::GetLocations(const Identifier &id) const$/;"	f	class:DetectorLibrary
GetLocations	src/DetectorLibrary.cpp	/^const set<int>& DetectorLibrary::GetLocations(const string &type, const string &subtype) const$/;"	f	class:DetectorLibrary
GetMaxEvent	include/RawEvent.hpp	/^    ChanEvent* GetMaxEvent(bool fake)$/;"	f	class:DetectorSummary
GetMaxEvent	include/RawEvent.hpp	/^    const ChanEvent* GetMaxEvent(void) const $/;"	f	class:DetectorSummary
GetMean	src/StatsAccumulator.cpp	/^double StatsAccumulator::GetMean() const$/;"	f	class:StatsAccumulator
GetModules	include/DetectorLibrary.hpp	/^    unsigned int GetModules() const {return numModules;}$/;"	f	class:DetectorLibrary
GetMult	include/RawEvent.hpp	/^    int GetMult() const $/;"	f	class:DetectorSummary
GetName	include/EventProcessor.hpp	/^    std::string GetName(void) const {$/;"	f	class:EventProcessor
GetName	include/RawEvent.hpp	/^    const std::string& GetName() const          $/;"	f	class:DetectorSummary
GetNextLocation	src/DetectorLibrary.cpp	/^int DetectorLibrary::GetNextLocation(const Identifier &id) const$/;"	f	class:DetectorLibrary
GetNextLocation	src/DetectorLibrary.cpp	/^int DetectorLibrary::GetNextLocation(const string &type, $/;"	f	class:DetectorLibrary
GetNumberArguments	include/GetArguments.hpp	/^inline int GetNumberArguments(void) $/;"	f
GetOffset	include/Plots.hpp	/^    int GetOffset() { return offset; }$/;"	f	class:Plots
GetPhysicalModules	include/DetectorLibrary.hpp	/^    unsigned int GetPhysicalModules() const {return numPhysicalModules;}$/;"	f	class:DetectorLibrary
GetProcessors	include/DetectorDriver.hpp	/^    const vector<EventProcessor *>& GetProcessors(void) const$/;"	f	class:DetectorDriver
GetProcessors	src/DetectorDriver.cpp	/^vector<EventProcessor *> DetectorDriver::GetProcessors(const string& type) const$/;"	f	class:DetectorDriver
GetQdcValue	src/RawEvent.cpp	/^unsigned long ChanEvent::GetQdcValue(int i) const$/;"	f	class:ChanEvent
GetRealTime	src/StatsData.cpp	/^double StatsData::GetRealTime(unsigned int mod) const$/;"	f	class:StatsData
GetRiseSamples	include/Trace.hpp	/^    Trace::size_type GetRiseSamples(void) const {return riseSamples;}$/;"	f	class:TrapezoidalFilterParameters
GetRunTime0	include/RawEvent.hpp	/^    unsigned long GetRunTime0() const$/;"	f	class:ChanEvent
GetRunTime1	include/RawEvent.hpp	/^    unsigned long GetRunTime1() const$/;"	f	class:ChanEvent
GetRunTime2	include/RawEvent.hpp	/^    unsigned long GetRunTime2() const$/;"	f	class:ChanEvent
GetSize	include/Trace.hpp	/^    Trace::size_type GetSize(void) const  $/;"	f	class:TrapezoidalFilterParameters
GetStdDev	src/StatsAccumulator.cpp	/^double StatsAccumulator::GetStdDev() const$/;"	f	class:StatsAccumulator
GetSubtype	include/RawEvent.hpp	/^    const std::string& GetSubtype() const {return subtype;}  \/**< Get the detector subtype *\/$/;"	f	class:Identifier
GetSummary	src/RawEvent.cpp	/^DetectorSummary *RawEvent::GetSummary(const string& s, bool construct)$/;"	f	class:RawEvent
GetSummary	src/RawEvent.cpp	/^const DetectorSummary *RawEvent::GetSummary(const string &s) const$/;"	f	class:RawEvent
GetTag	src/RawEvent.cpp	/^Identifier::TagValue Identifier::GetTag(const string &s) const$/;"	f	class:Identifier
GetTau	include/Trace.hpp	/^    double GetTau(void) const      {return tau;}$/;"	f	class:TrapezoidalFilterParameters
GetTime	include/RawEvent.hpp	/^    double GetTime() const        {return time;}        \/**< Get the raw time *\/$/;"	f	class:ChanEvent
GetTimingCal	src/TimingInformation.cpp	/^TimingInformation::TimingCal TimingInformation::GetTimingCal(const IdentKey &identity)$/;"	f	class:TimingInformation
GetTrace	include/RawEvent.hpp	/^    Trace& GetTrace() {return trace;} \/** Get a reference which can alter the trace *\/$/;"	f	class:ChanEvent
GetTrace	include/RawEvent.hpp	/^    const Trace& GetTrace() const {return trace;} \/**< Get a reference to the trace *\/$/;"	f	class:ChanEvent
GetTrigTime	include/RawEvent.hpp	/^    unsigned long GetTrigTime() const    $/;"	f	class:ChanEvent
GetType	include/RawEvent.hpp	/^    const std::string& GetType() const    {return type;}     \/**< Get the detector type *\/$/;"	f	class:Identifier
GetTypes	include/EventProcessor.hpp	/^    virtual const std::set<std::string>& GetTypes(void) const {$/;"	f	class:EventProcessor
GetUsedDetectors	src/DetectorDriver.cpp	/^const set<string>& DetectorDriver::GetUsedDetectors() const$/;"	f	class:DetectorDriver
GetUsedDetectors	src/DetectorLibrary.cpp	/^const set<string>& DetectorLibrary::GetUsedDetectors(void) const$/;"	f	class:DetectorLibrary
GetValue	include/Trace.hpp	/^    double GetValue(std::string name) const {$/;"	f	class:Trace
GetWallTime	include/DetectorDriver.hpp	/^    time_t GetWallTime(double d) const {$/;"	f	class:DetectorDriver
HHIRF_DIR	Makefile	/^HHIRF_DIR = \/usr\/hhirf$/;"	m
HHIRF_GFORTRAN	Makefile	/^HHIRF_GFORTRAN = 1$/;"	m
HISTOGRAMMERO	Makefile	/^HISTOGRAMMERO    = DeclareHistogram.$(ObjSuf)$/;"	m
HISTOGRAM_MEMORY_ADDRESS	include/pixie16app_defs.h	203;"	d
HISTOGRAM_RUN	include/pixie16app_defs.h	172;"	d
HasEvent	src/EventProcessor.cpp	/^bool EventProcessor::HasEvent(void) const$/;"	f	class:EventProcessor
HasTag	include/RawEvent.hpp	/^    bool HasTag(const std::string &s) const {return (tag.count(s) > 0);} \/**< True if the tag s has been inserted *\/$/;"	f	class:Identifier
HasValue	include/Trace.hpp	/^    bool HasValue(std::string name) const {$/;"	f	class:Trace
HasValue	src/DetectorLibrary.cpp	/^bool DetectorLibrary::HasValue(int index) const$/;"	f	class:DetectorLibrary
HasValue	src/DetectorLibrary.cpp	/^bool DetectorLibrary::HasValue(int mod, int chan) const$/;"	f	class:DetectorLibrary
HasWildcard	src/MapFile.cpp	/^bool MapFile::HasWildcard(const string &str) const$/;"	f	class:MapFile
HistoPoints	src/PixieStd.cpp	/^enum HistoPoints {BUFFER_START, BUFFER_END, EVENT_START = 10, EVENT_CONTINUE};$/;"	g	file:
HistoStats	src/PixieStd.cpp	/^void HistoStats(unsigned int id, double diff, double clock, HistoPoints event)$/;"	f
I	scan/scanorux.f	/^      IN/;"	v
IARGC__GETARGS	include/GetArguments.hpp	14;"	d
IARGC__GETARGS	include/GetArguments.hpp	17;"	d
ICNF	scan/scanorux.f	/^      CHARACTER*4              ICNF$/;"	v
IDONE	scan/scanorux.f	/^      CHARACTER*4  IDONE,/;"	v
IERR	scan/scanorux.f	/^      INTEGER*4    RETN,IERR,/;"	v
IHEDN	scan/scanorux.f	/^      INTEGER*4         IHEDN,/;"	v
IMPLANT_EVENT	include/Correlator.hpp	/^    enum EEventTypes {IMPLANT_EVENT, ALPHA_EVENT, BETA_EVENT, FISSION_EVENT, $/;"	e	enum:EventInfo::EEventTypes
IMPLANT_TOO_SOON	include/Correlator.hpp	/^		      IMPLANT_TOO_SOON     = 52,$/;"	e	enum:Correlator::EConditions
INDIR	scan/scanorux.f	/^      INTEGER*4    INDIR,/;"	v
INFO_MISSING_BOTTOM	src/PositionProcessor.cpp	/^		    INFO_MISSING_BOTTOM = 5,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_MISSING_BOTTOM_QDC	src/PositionProcessor.cpp	/^		    INFO_MISSING_BOTTOM_QDC = 1,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_MISSING_TOP	src/PositionProcessor.cpp	/^		    INFO_MISSING_TOP = 6,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_MISSING_TOP_QDC	src/PositionProcessor.cpp	/^		    INFO_MISSING_TOP_QDC = 2,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_MULTIPLE_BOTTOM	src/PositionProcessor.cpp	/^		    INFO_MULTIPLE_BOTTOM = 3,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_MULTIPLE_TOP	src/PositionProcessor.cpp	/^		    INFO_MULTIPLE_TOP = 4,$/;"	e	enum:dammIds::position::EInfo	file:
INFO_NOISE	src/PositionProcessor.cpp	/^		    INFO_NOISE = 7$/;"	e	enum:dammIds::position::EInfo	file:
INFO_OKAY	src/PositionProcessor.cpp	/^	enum EInfo {INFO_OKAY = 0,$/;"	e	enum:dammIds::position::EInfo	file:
INRECI	scan/scanorux.f	/^      INTEGER*4    INDIR,            INRECI,/;"	v
INTYP	scan/scanorux.f	/^      CHARACTER*4              INTYP$/;"	v
INVALID_LOCATION	include/Correlator.hpp	/^    enum EConditions {INVALID_LOCATION     = 4,$/;"	e	enum:Correlator::EConditions
IONCHAMBERPROCESSORO	Makefile	/^IONCHAMBERPROCESSORO = IonChamberProcessor.$(ObjSuf)$/;"	m
IO_BUFFER_ADDRESS	include/pixie16app_defs.h	205;"	d
IO_BUFFER_LENGTH	include/pixie16app_defs.h	206;"	d
ISSDPROCESSORO	Makefile	/^ISSDPROCESSORO   = ImplantSsdProcessor.$(ObjSuf)$/;"	m
ISTAT	scan/scanorux.f	/^      INTEGER*4    NSEC,ISTAT,/;"	v
ISWAB	scan/scanorux.f	/^      CHARACTER*4                             ISWAB,/;"	v
ITYP	scan/scanorux.f	/^      INTEGER*4    IWD,    LWD,      ITYP,/;"	v
IWD	scan/scanorux.f	/^      INTEGER*4    IWD,/;"	v
IWDRAW	scan/scanorux.f	/^      INTEGER*4    IWDRAW$/;"	v
IdentKey	include/TimingInformation.hpp	/^    typedef std::pair<unsigned int, std::string> IdentKey;$/;"	t	class:TimingInformation
Identifier	include/RawEvent.hpp	/^class Identifier$/;"	c
Identifier	src/RawEvent.cpp	/^Identifier::Identifier(){$/;"	f	class:Identifier
ImplantSsdProcessor	include/ImplantSsdProcessor.hpp	/^class ImplantSsdProcessor : public EventProcessor $/;"	c
ImplantSsdProcessor	src/ImplantSsdProcessor.cpp	/^ImplantSsdProcessor::ImplantSsdProcessor() : EventProcessor(OFFSET, RANGE)$/;"	f	class:ImplantSsdProcessor
Init	include/DoubleTraceAnalyzer.hpp	/^    virtual bool Init(void) {return TraceFilterer::Init();}$/;"	f	class:DoubleTraceAnalyzer
Init	src/Correlator.cpp	/^void Correlator::Init()$/;"	f	class:Correlator
Init	src/DetectorDriver.cpp	/^int DetectorDriver::Init(void)$/;"	f	class:DetectorDriver
Init	src/EventProcessor.cpp	/^bool EventProcessor::Init(DetectorDriver &driver) $/;"	f	class:EventProcessor
Init	src/GeProcessor.cpp	/^bool GeProcessor::Init(DetectorDriver &driver)$/;"	f	class:GeProcessor
Init	src/LitePositionProcessor.cpp	/^bool LitePositionProcessor::Init(DetectorDriver &driver)$/;"	f	class:LitePositionProcessor
Init	src/PositionProcessor.cpp	/^bool PositionProcessor::Init(DetectorDriver &driver)$/;"	f	class:PositionProcessor
Init	src/RawEvent.cpp	/^void RawEvent::Init(const set<string> &usedTypes)$/;"	f	class:RawEvent
Init	src/RootProcessor.cpp	/^bool RootProcessor::Init(DetectorDriver &driver)$/;"	f	class:RootProcessor
Init	src/TraceAnalyzer.cpp	/^bool TraceAnalyzer::Init(void)$/;"	f	class:TraceAnalyzer
Init	src/TraceFilterer.cpp	/^bool TraceFilterer::Init(const string &filterFile)$/;"	f	class:TraceFilterer
Init	src/VandleProcessor.cpp	/^bool VandleProcessor::Init(DetectorDriver &driver)$/;"	f	class:VandleProcessor
InitMap	src/PixieStd.cpp	/^bool InitMap(void) $/;"	f
InsertValue	include/Trace.hpp	/^    void InsertValue(std::string name, double value) {$/;"	f	class:Trace
InsertValue	include/Trace.hpp	/^    void InsertValue(std::string name, int value) {$/;"	f	class:Trace
IonChamberProcessor	include/IonChamberProcessor.hpp	/^class IonChamberProcessor : public EventProcessor $/;"	c
IonChamberProcessor	src/IonChamberProcessor.cpp	/^IonChamberProcessor::IonChamberProcessor() : EventProcessor(OFFSET, RANGE)$/;"	f	class:IonChamberProcessor
IsFlagged	src/Correlator.cpp	/^bool CorrelationList::IsFlagged() const$/;"	f	class:CorrelationList
IsFlagged	src/Correlator.cpp	/^bool Correlator::IsFlagged(int fch, int bch)$/;"	f	class:Correlator
IsPileup	include/RawEvent.hpp	/^    bool IsPileup() const {$/;"	f	class:ChanEvent
IsSaturated	include/RawEvent.hpp	/^    bool IsSaturated() const { \/**< Return whether the trace is saturated *\/$/;"	f	class:ChanEvent
JCNF	scan/scanorux.f	/^      CHARACTER*4  JCNF$/;"	v
KERR	scan/scanorux.f	/^      INTEGER*4    NSEC,ISTAT,KIND,KERR$/;"	v
KIND	scan/scanorux.f	/^      INTEGER*4    NSEC,ISTAT,KIND,/;"	v
KMD	scan/scanorux.f	/^      CHARACTER*4  IDONE,KMD,/;"	v
KOM	scan/scanorux.f	/^      CHARACTER*4  IDONE,KMD,KOM$/;"	v
LASTEVT	scan/scanorux.f	/^      REAL*8         STRBUFEVT,NUMBUFEVTS,BUF_NUM,LASTEVT,/;"	v
LBAN	scan/scanorux.f	/^      INTEGER*4    LCON,LCMD,LIN,LBAN,/;"	v
LCMD	scan/scanorux.f	/^      INTEGER*4    LCON,LCMD,/;"	v
LCON	scan/scanorux.f	/^      INTEGER*4    LCON,/;"	v
LDLIBS	Makefile	/^LDLIBS       := $(shell $(ROOTCONFIG) --libs)$/;"	m
LFORM	scan/scanorux.f	/^      CHARACTER*4                             ISWAB,LFORM$/;"	v
LHEP	scan/scanorux.f	/^      INTEGER*4    LCON,LCMD,LIN,LBAN,LHEP$/;"	v
LIBS	Makefile	/^LIBS = $(HHIRF_DIR)\/scanorlib.a $(HHIRF_DIR)\/orphlib.a \\$/;"	m
LIBS_IN_HHIRF	Makefile	/^LIBS_IN_HHIRF = 1$/;"	m
LIN	scan/scanorux.f	/^      INTEGER*4    LCON,LCMD,LIN,/;"	v
LINK.o	Makefile	/^LINK.o    = $(FC) $(LDFLAGS)$/;"	m
LISFLG	scan/scanorux.f	/^      CHARACTER*4 LISFLG,/;"	v
LIST_MODE_RUN0	include/pixie16app_defs.h	168;"	d
LIST_MODE_RUN1	include/pixie16app_defs.h	169;"	d
LIST_MODE_RUN2	include/pixie16app_defs.h	170;"	d
LIST_MODE_RUN3	include/pixie16app_defs.h	171;"	d
LLL	scan/messlog.f	12;"	c	subroutine:MESSLOG
LLL	scan/scanorux.f	10;"	c
LNBY	scan/scanorux.f	/^      INTEGER*4    NHWH,LSTL,LNBY,/;"	v
LOC_SUM	src/LitePositionProcessor.cpp	/^	const int LOC_SUM  = 18;$/;"	m	namespace:dammIds::position	file:
LOC_SUM	src/PositionProcessor.cpp	/^        const int LOC_SUM  = 18;$/;"	m	namespace:dammIds::position	file:
LOGICPROCESSORO	Makefile	/^LOGICPROCESSORO  = LogicProcessor.$(ObjSuf)$/;"	m
LOGUP	scan/scanorux.f	/^      INTEGER*4   MSSG,NAMPROG,LOGUT,LOGUP$/;"	v
LOGUT	scan/scanorux.f	/^      INTEGER*4   MSSG,NAMPROG,LOGUT,/;"	v
LSTL	scan/scanorux.f	/^      INTEGER*4    NHWH,LSTL,/;"	v
LUC	scan/scanorux.f	/^      INTEGER*4    LUC$/;"	v
LUD	scan/scanorux.f	/^      INTEGER*4    LUT,LUH,LUD$/;"	v
LUH	scan/scanorux.f	/^      INTEGER*4    LUT,LUH,/;"	v
LUINF	scan/scanorux.f	/^      INTEGER*4    INDIR,            INRECI,LUINF$/;"	v
LUT	scan/scanorux.f	/^      INTEGER*4    LUT,/;"	v
LWD	scan/scanorux.f	/^      INTEGER*4    IWD,    LWD,/;"	v
LiquidAnalysis	src/ScintProcessor.cpp	/^void ScintProcessor::LiquidAnalysis(RawEvent &event)$/;"	f	class:ScintProcessor
LitePositionProcessor	include/LitePositionProcessor.hpp	/^class LitePositionProcessor : public EventProcessor$/;"	c
LogicProcessor	include/LogicProcessor.hpp	/^class LogicProcessor : public EventProcessor {$/;"	c
LogicProcessor	src/LogicProcessor.cpp	/^LogicProcessor::LogicProcessor(int offset, int range) : $/;"	f	class:LogicProcessor
LogicProcessor	src/LogicProcessor.cpp	/^LogicProcessor::LogicProcessor(void) : $/;"	f	class:LogicProcessor
LogicStatus	include/LogicProcessor.hpp	/^    virtual bool LogicStatus(size_t loc) const {$/;"	f	class:LogicProcessor
M	include/MersenneTwister.hpp	/^	enum { M = 397 };  \/\/ period parameter$/;"	e	enum:MTRand::__anon3
MAPFILEO	Makefile	/^MAPFILEO         = MapFile.$(ObjSuf)$/;"	m
MAXIP	scan/scanorux.f	/^      INTEGER*4    NHWH,LSTL,LNBY,MAXIP,/;"	v
MAX_ADC_TRACE_LEN	include/pixie16app_defs.h	159;"	d
MAX_CLOVERS	src/GeProcessor.cpp	/^	const unsigned int MAX_CLOVERS = 4; \/\/ for *_DETX spectra$/;"	m	namespace:dammIds::ge	file:
MAX_ERRMSG_LENGTH	include/pixie16app_defs.h	302;"	d
MAX_HISTOGRAM_LENGTH	include/pixie16app_defs.h	204;"	d
MAX_LOGIC	include/DammPlotIds.hpp	/^        const int MAX_LOGIC = 10; \/*< maximum number of logic signals *\/$/;"	m	namespace:dammIds::logic
MAX_NUM_BASELINES	include/pixie16app_defs.h	305;"	d
MAX_PAR	include/Globals.hpp	/^const int MAX_PAR = 32000; \/\/< maximum limit for calibrations$/;"	v
MAX_PAR_NAME_LENGTH	include/pixie16app_defs.h	300;"	d
MAX_TOF	src/ImplantSsdProcessor.cpp	/^        const int MAX_TOF = 5;$/;"	m	namespace:dammIds::implantSsd	file:
MBFL	scan/scanorux.f	/^      INTEGER*4         IHEDN,MBFL$/;"	v
MCPPROCESSORO	Makefile	/^MCPPROCESSORO    = McpProcessor.$(ObjSuf)$/;"	m
MEM_STYLE	scan/scanorux.f	/^      CHARACTER*80 MEM_STYLE$/;"	v
MESSLOG	scan/messlog.f	/^      SUBROUTINE MESSLOG(/;"	s
MESSLOGO	Makefile	/^MESSLOGO         = messlog.$(ObjSuf)$/;"	m
MILDATIM	scan/mildatim.f	/^      SUBROUTINE MILDATIM(/;"	s
MILDATIMO	Makefile	/^MILDATIMO        = mildatim.$(ObjSuf)$/;"	m
MIN_FASTLENGTH_LEN	include/pixie16app_defs.h	231;"	d
MIN_SLOWGAP_LEN	include/pixie16app_defs.h	235;"	d
MIN_SLOWLENGTH_LEN	include/pixie16app_defs.h	234;"	d
MISC_OFFSET	src/VandleProcessor.cpp	/^    const unsigned int MISC_OFFSET    = 60;$/;"	m	namespace:dammIds	file:
ML01	scan/scanorux.f	16;"	c
ML02	scan/scanorux.f	19;"	c
MODCSRB_BPCONNECTION	include/pixie16app_defs.h	283;"	d
MODCSRB_CHASSISMASTER	include/pixie16app_defs.h	289;"	d
MODCSRB_DIRMOD	include/pixie16app_defs.h	287;"	d
MODCSRB_FASTTRIGSRC	include/pixie16app_defs.h	285;"	d
MODCSRB_INHIBITENA	include/pixie16app_defs.h	293;"	d
MODCSRB_LEFTASTMOD	include/pixie16app_defs.h	292;"	d
MODCSRB_MASTERMODULE	include/pixie16app_defs.h	284;"	d
MODCSRB_MULTCRATES	include/pixie16app_defs.h	294;"	d
MODCSRB_MWMOD	include/pixie16app_defs.h	290;"	d
MODCSRB_PULLUP	include/pixie16app_defs.h	282;"	d
MODCSRB_RECTRIGENA	include/pixie16app_defs.h	288;"	d
MODCSRB_RIGHTASTMOD	include/pixie16app_defs.h	291;"	d
MOD_READ	include/pixie16app_defs.h	179;"	d
MOD_WRITE	include/pixie16app_defs.h	180;"	d
MSGF	scan/scanorux.f	/^      CHARACTER*4 LISFLG,MSGF$/;"	v
MSSG	scan/scanorux.f	/^      INTEGER*4   MSSG,/;"	v
MSU_SEGA_MODE	include/pixie16app_defs.h	81;"	d
MTCPROCESSORO	Makefile	/^MTCPROCESSORO    = MtcProcessor.$(ObjSuf)$/;"	m
MTRand	include/MersenneTwister.hpp	/^class MTRand {$/;"	c
MTRand	include/MersenneTwister.hpp	/^inline MTRand::MTRand( const uint32& oneSeed )$/;"	f	class:MTRand
MTRand	include/MersenneTwister.hpp	/^inline MTRand::MTRand( uint32 *const bigSeed, const uint32 seedLength )$/;"	f	class:MTRand
MTRand	include/MersenneTwister.hpp	/^inline MTRand::MTRand()$/;"	f	class:MTRand
MakeKey	src/DetectorLibrary.cpp	/^DetectorLibrary::mapkey_t DetectorLibrary::MakeKey(const string &type, const string &subtype) const$/;"	f	class:DetectorLibrary
MakeModuleData	src/PixieStd.cpp	/^bool MakeModuleData(const word_t *data, unsigned long nWords)$/;"	f
MapFile	include/MapFile.hpp	/^class MapFile$/;"	c
MapFile	src/MapFile.cpp	/^MapFile::MapFile()$/;"	f	class:MapFile
MapFile	src/MapFile.cpp	/^MapFile::MapFile(const string &filename)$/;"	f	class:MapFile
McpData	include/McpProcessor.hpp	/^  struct McpData {$/;"	s	class:McpProcessor
McpProcessor	include/McpProcessor.hpp	/^class McpProcessor : public EventProcessor$/;"	c
McpProcessor	src/McpProcessor.cpp	/^McpProcessor::McpProcessor(void) : EventProcessor(OFFSET, RANGE)$/;"	f	class:McpProcessor
ModuleFromIndex	src/DetectorLibrary.cpp	/^int DetectorLibrary::ModuleFromIndex(int index) const$/;"	f	class:DetectorLibrary
MtcProcessor	include/MtcProcessor.hpp	/^class MtcProcessor : public EventProcessor {$/;"	c
MtcProcessor	src/MtcProcessor.cpp	/^MtcProcessor::MtcProcessor(void) : EventProcessor(OFFSET, RANGE), $/;"	f	class:MtcProcessor
N	include/MersenneTwister.hpp	/^	enum { N = 624 };       \/\/ length of state vector$/;"	e	enum:MTRand::__anon1
NAMCMD	scan/scanorux.f	/^      INTEGER*4    NAMCMD$/;"	v
NAMCMDS	scan/scanorux.f	/^      INTEGER*4    NAMCMDS(/;"	v
NAMPROG	scan/scanorux.f	/^      INTEGER*4   MSSG,NAMPROG,/;"	v
NAN	include/Trace.hpp	25;"	d
NBRED	scan/scanorux.f	/^      INTEGER*4    NBRED,/;"	v
NBTOP	scan/scanorux.f	/^      INTEGER*4    NBRED,NBTOP$/;"	v
NEWCORRELATORO	Makefile	/^NEWCORRELATORO   = NewCorrelator.$(ObjSuf)$/;"	m
NEWCORRELATOR_H	include/NewCorrelator.hpp	2;"	d
NEW_RUN	include/pixie16app_defs.h	165;"	d
NF	scan/scanorux.f	/^      INTEGER*4    IWD,    LWD,      ITYP,    NF,/;"	v
NHWH	scan/scanorux.f	/^      INTEGER*4    NHWH,/;"	v
NSEC	scan/scanorux.f	/^      INTEGER*4    NSEC,/;"	v
NSKIP	scan/scanorux.f	/^      INTEGER*4    NHWH,LSTL,LNBY,MAXIP,NSKIP$/;"	v
NTER	scan/scanorux.f	/^      INTEGER*4    IWD,    LWD,      ITYP,    NF,NTER$/;"	v
NUMBER_OF_CHANNELS	include/pixie16app_defs.h	147;"	d
NUMBUFEVTS	scan/scanorux.f	/^      REAL*8         STRBUFEVT,NUMBUFEVTS,/;"	v
NUM_DETECTORS	src/SsdProcessor.cpp	/^        const int NUM_DETECTORS = 4;$/;"	m	namespace:dammIds::ssd	file:
N_COM_FPGA_CONF	include/pixie16app_defs.h	131;"	d
N_COM_FPGA_CONF	include/pixie16app_defs.h	135;"	d
N_DSP_PAR	include/pixie16app_defs.h	138;"	d
N_SP_FPGA_CONF	include/pixie16app_defs.h	133;"	d
N_SP_FPGA_CONF	include/pixie16app_defs.h	136;"	d
N_TRIG_FPGA_CONF	include/pixie16app_defs.h	132;"	d
OBJS	Makefile	/^OBJS   = $(READBUFFDATAO) $(SET2CCO) $(DSSDSUBO) $(DETECTORDRIVERO) \\$/;"	m
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 1;$/;"	m	namespace:dammIds::raw
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 2000;$/;"	m	namespace:dammIds::mcp
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 2100;$/;"	m	namespace:dammIds::scint
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 2500;$/;"	m	namespace:dammIds::ge
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 3000;$/;"	m	namespace:dammIds::logic
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 3100;$/;"	m	namespace:dammIds::triggerlogic
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 3200;$/;"	m	namespace:dammIds::vandle
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 3400;$/;"	m	namespace:dammIds::pulser
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 3420;$/;"	m	namespace:dammIds::waveformanalyzer
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 4100;$/;"	m	namespace:dammIds::ssd
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 4200;$/;"	m	namespace:dammIds::implantSsd
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 4500;$/;"	m	namespace:dammIds::mtc
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 4700;$/;"	m	namespace:dammIds::ionChamber
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 5000;$/;"	m	namespace:dammIds::position
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 6000;$/;"	m	namespace:dammIds::correlator
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 7000;$/;"	m	namespace:dammIds::dssd
OFFSET	include/DammPlotIds.hpp	/^        const int OFFSET = 7500;$/;"	m	namespace:dammIds::trace
ORNL_PSD	include/pixie16app_defs.h	87;"	d
ORPHAS	scan/scanorux.f	56;"	c
ObjSuf	Makefile	/^ObjSuf        = o$/;"	m
OffsetPlot	src/Trace.cpp	/^void Trace::OffsetPlot(int id, double offset)$/;"	f	class:Trace
OffsetPlot	src/Trace.cpp	/^void Trace::OffsetPlot(int id, int row, double offset)$/;"	f	class:Trace
OutPutOpt	Makefile	/^OutPutOpt     = -o # keep whitespace after "-o"$/;"	m
OutputFittedInformation	src/FittingAnalyzer.cpp	/^void FittingAnalyzer::OutputFittedInformation()$/;"	f	class:FittingAnalyzer
PCI_STOPRUN_REGADDR	include/pixie16app_defs.h	310;"	d
PI	include/pixie16app_defs.h	118;"	d
PI2	include/pixie16app_defs.h	122;"	d
PIXIE	Makefile	/^PIXIE = pixie_ldf_c$(ExeSuf)$/;"	m
PIXIE	Makefile	/^PIXIE = pixie_ldf_c_online$(ExeSuf)$/;"	m
PIXIE	Makefile	/^PIXIE = pixie_ldf_c_root$(ExeSuf)$/;"	m
PIXIE16APP_API	include/pixie16app_defs.h	106;"	d
PIXIE16APP_API	include/pixie16app_defs.h	109;"	d
PIXIE16APP_EXPORT	include/pixie16app_defs.h	105;"	d
PIXIE16APP_EXPORT	include/pixie16app_defs.h	108;"	d
PIXIE16_APPAPI_VER	include/pixie16app_defs.h	98;"	d
PIXIE16_LINUX_APPAPI	include/pixie16app_defs.h	96;"	d
PIXIE16_REVA	include/pixie16app_defs.h	63;"	d
PIXIE16_REVB	include/pixie16app_defs.h	64;"	d
PIXIE16_REVC_GENERAL	include/pixie16app_defs.h	66;"	d
PIXIE16_REVC_MSU	include/pixie16app_defs.h	65;"	d
PIXIE16_REVD_GENERAL	include/pixie16app_defs.h	68;"	d
PIXIE16_REVD_ITHEMBA	include/pixie16app_defs.h	67;"	d
PIXIE16_REVISION	include/pixie16app_defs.h	70;"	d
PIXIE16_WINDOWS_APPAPI	include/pixie16app_defs.h	95;"	d
PIXIEO	Makefile	/^PIXIEO           = PixieStd.$(ObjSuf)$/;"	m
PLOTSO	Makefile	/^PLOTSO           = Plots.$(ObjSuf)$/;"	m
PLOTSREGISTERO	Makefile	/^PLOTSREGISTERO   = PlotsRegister.$(ObjSuf)$/;"	m
POSITIONPROCESSORO	Makefile	/^POSITIONPROCESSORO = PositionProcessor.$(ObjSuf)$/;"	m
PRESET_MAX_MODULES	include/pixie16app_defs.h	146;"	d
PROGRAMS	Makefile	/^PROGRAMS = $(PIXIE)$/;"	m
PROGRAM_FIPPI	include/pixie16app_defs.h	321;"	d
PROJECTILE_EVENT	include/Correlator.hpp	/^		      PROTON_EVENT, DECAY_EVENT, PROJECTILE_EVENT, GAMMA_EVENT,$/;"	e	enum:EventInfo::EEventTypes
PROTON_EVENT	include/Correlator.hpp	/^		      PROTON_EVENT, DECAY_EVENT, PROJECTILE_EVENT, GAMMA_EVENT,$/;"	e	enum:EventInfo::EEventTypes
PULSERPROCESSORO	Makefile	/^PULSERPROCESSORO = PulserProcessor.$(ObjSuf)$/;"	m
Pixie16Error	src/PixieStd.cpp	/^void Pixie16Error(int errorNum)$/;"	f
Place	include/NewCorrelator.hpp	/^        Place() {$/;"	f	class:Place
Place	include/NewCorrelator.hpp	/^class Place {$/;"	c
PlaceAND	include/NewCorrelator.hpp	/^        PlaceAND() : Place() {}$/;"	f	class:PlaceAND
PlaceAND	include/NewCorrelator.hpp	/^class PlaceAND : public Place {$/;"	c
PlaceBasic	include/NewCorrelator.hpp	/^        PlaceBasic() : Place() {} $/;"	f	class:PlaceBasic
PlaceBasic	include/NewCorrelator.hpp	/^class PlaceBasic : public Place {$/;"	c
PlaceOR	include/NewCorrelator.hpp	/^        PlaceOR() : Place() {}$/;"	f	class:PlaceOR
PlaceOR	include/NewCorrelator.hpp	/^class PlaceOR : public Place {$/;"	c
Plot	src/Plots.cpp	/^bool Plots::Plot(const std::string &mne, double val1, double val2, double val3, const char* name)$/;"	f	class:Plots
Plot	src/Plots.cpp	/^bool Plots::Plot(int dammId, double val1, double val2, double val3, const char* name)$/;"	f	class:Plots
Plot	src/Trace.cpp	/^void Trace::Plot(int id)$/;"	f	class:Trace
Plot	src/Trace.cpp	/^void Trace::Plot(int id, int row)$/;"	f	class:Trace
PlotCal	src/DetectorDriver.cpp	/^int DetectorDriver::PlotCal(const ChanEvent *chan)$/;"	f	class:DetectorDriver
PlotRaw	src/DetectorDriver.cpp	/^int DetectorDriver::PlotRaw(const ChanEvent *chan)$/;"	f	class:DetectorDriver
PlotType	src/ImplantSsdProcessor.cpp	/^void ImplantSsdProcessor::PlotType(EventInfo &info, int loc, Correlator::EConditions cond)$/;"	f	class:ImplantSsdProcessor
Plots	include/Plots.hpp	/^class Plots {$/;"	c
Plots	src/Plots.cpp	/^Plots::Plots(int aOffset, int aRange, PlotsRegister *reg)$/;"	f	class:Plots
PlotsRegister	include/PlotsRegister.hpp	/^    PlotsRegister(bool create) {}$/;"	f	class:PlotsRegister
PlotsRegister	include/PlotsRegister.hpp	/^class PlotsRegister {$/;"	c
PositionProcessor	include/PositionProcessor.hpp	/^class PositionProcessor : public EventProcessor$/;"	c
PositionProcessor	src/LitePositionProcessor.cpp	/^LitePositionProcessor::PositionProcessor() : EventProcessor(OFFSET, RANGE)$/;"	f	class:LitePositionProcessor
PositionProcessor	src/PositionProcessor.cpp	/^PositionProcessor::PositionProcessor() : EventProcessor(OFFSET, RANGE) {$/;"	f	class:PositionProcessor
Print	src/RawEvent.cpp	/^void Identifier::Print(void) const$/;"	f	class:Identifier
PrintDecayList	src/Correlator.cpp	/^void CorrelationList::PrintDecayList() const$/;"	f	class:CorrelationList
PrintDecayList	src/Correlator.cpp	/^void Correlator::PrintDecayList(unsigned int fch, unsigned int bch) const$/;"	f	class:Correlator
PrintHeaders	src/RawEvent.cpp	/^void Identifier::PrintHeaders(void) $/;"	f	class:Identifier
PrintMap	src/DetectorLibrary.cpp	/^void DetectorLibrary::PrintMap(void) const$/;"	f	class:DetectorLibrary
PrintNonEmpty	src/Plots.cpp	/^void Plots::PrintNonEmpty(std::ofstream& hislog) {$/;"	f	class:Plots
PrintUsedDetectors	src/DetectorLibrary.cpp	/^void DetectorLibrary::PrintUsedDetectors(void) const$/;"	f	class:DetectorLibrary
Process	src/DssdProcessor.cpp	/^bool DssdProcessor::Process(RawEvent &event)$/;"	f	class:DssdProcessor
Process	src/EventProcessor.cpp	/^bool EventProcessor::Process(RawEvent &event)$/;"	f	class:EventProcessor
Process	src/GeProcessor.cpp	/^bool GeProcessor::Process(RawEvent &event) {$/;"	f	class:GeProcessor
Process	src/ImplantSsdProcessor.cpp	/^bool ImplantSsdProcessor::Process(RawEvent &event)$/;"	f	class:ImplantSsdProcessor
Process	src/IonChamberProcessor.cpp	/^bool IonChamberProcessor::Process(RawEvent &event)$/;"	f	class:IonChamberProcessor
Process	src/LitePositionProcessor.cpp	/^bool LitePositionProcessor::Process(RawEvent &event)$/;"	f	class:LitePositionProcessor
Process	src/LogicProcessor.cpp	/^bool LogicProcessor::Process(RawEvent &event)$/;"	f	class:LogicProcessor
Process	src/McpProcessor.cpp	/^bool McpProcessor::Process(RawEvent &event)$/;"	f	class:McpProcessor
Process	src/MtcProcessor.cpp	/^bool MtcProcessor::Process(RawEvent &event)$/;"	f	class:MtcProcessor
Process	src/PositionProcessor.cpp	/^bool PositionProcessor::Process(RawEvent &event) {$/;"	f	class:PositionProcessor
Process	src/PulserProcessor.cpp	/^bool PulserProcessor::Process(RawEvent &event) $/;"	f	class:PulserProcessor
Process	src/RootProcessor.cpp	/^bool RootProcessor::Process(RawEvent &event)$/;"	f	class:RootProcessor
Process	src/ScintProcessor.cpp	/^bool ScintProcessor::Process(RawEvent &event)$/;"	f	class:ScintProcessor
Process	src/SsdProcessor.cpp	/^bool SsdProcessor::Process(RawEvent &event)$/;"	f	class:SsdProcessor
Process	src/TriggerLogicProcessor.cpp	/^bool TriggerLogicProcessor::Process(RawEvent &event)$/;"	f	class:TriggerLogicProcessor
Process	src/VandleProcessor.cpp	/^bool VandleProcessor::Process(RawEvent &event) $/;"	f	class:VandleProcessor
ProcessEvent	src/DetectorDriver.cpp	/^int DetectorDriver::ProcessEvent(const string &mode){   $/;"	f	class:DetectorDriver
ProcessTokenList	src/MapFile.cpp	/^void MapFile::ProcessTokenList(const vector<string> &tokenList) const$/;"	f	class:MapFile
PulseInfo	include/TraceFilterer.hpp	/^    struct PulseInfo {$/;"	s	class:TraceFilterer
PulseInfo	src/TraceFilterer.cpp	/^TraceFilterer::PulseInfo::PulseInfo()$/;"	f	class:TraceFilterer::PulseInfo
PulseInfo	src/TraceFilterer.cpp	/^TraceFilterer::PulseInfo::PulseInfo(Trace::size_type theTime, double theEnergy) :$/;"	f	class:TraceFilterer::PulseInfo
PulserProcessor	include/PulserProcessor.hpp	/^class PulserProcessor : public EventProcessor, $/;"	c
PulserProcessor	src/PulserProcessor.cpp	/^PulserProcessor::PulserProcessor(): EventProcessor(OFFSET, RANGE)$/;"	f	class:PulserProcessor
QDCLEN_MAX	include/pixie16app_defs.h	262;"	d
QDCLEN_MIN	include/pixie16app_defs.h	263;"	d
QDC_JUMP	src/LitePositionProcessor.cpp	/^	const int QDC_JUMP = 20;$/;"	m	namespace:dammIds::position	file:
QDC_JUMP	src/PositionProcessor.cpp	/^        const int QDC_JUMP = 20;$/;"	m	namespace:dammIds::position	file:
R	src/PlotsRegister.cpp	/^PlotsRegister* PlotsRegister::R() $/;"	f	class:PlotsRegister
RAMP_OFFSETDACS	include/pixie16app_defs.h	319;"	d
RANDOMINDICES_LENGTH	include/pixie16app_defs.h	301;"	d
RANDOMPOOLO	Makefile	/^RANDOMPOOLO      = RandomPool.$(ObjSuf)$/;"	m
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::correlator
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::ionChamber
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::logic
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::mtc
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::scint
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::ssd
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 100;$/;"	m	namespace:dammIds::triggerlogic
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 10;$/;"	m	namespace:dammIds::mcp
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 1899;$/;"	m	namespace:dammIds::raw
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 200;$/;"	m	namespace:dammIds::trace
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 200;$/;"	m	namespace:dammIds::vandle
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 20;$/;"	m	namespace:dammIds::pulser
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 20;$/;"	m	namespace:dammIds::waveformanalyzer
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 300;$/;"	m	namespace:dammIds::implantSsd
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 500;$/;"	m	namespace:dammIds::dssd
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 500;$/;"	m	namespace:dammIds::ge
RANGE	include/DammPlotIds.hpp	/^        const int RANGE = 600;$/;"	m	namespace:dammIds::position
RAWEVENTO	Makefile	/^RAWEVENTO        = RawEvent.$(ObjSuf)$/;"	m
READBUFFDATAO	Makefile	/^READBUFFDATAO    = ReadBuffData.$(ObjSuf)$/;"	m
READBUFFDATAO	Makefile	/^READBUFFDATAO    = ReadBuffData.RevD.$(ObjSuf)$/;"	m
RESUME_RUN	include/pixie16app_defs.h	166;"	d
RETN	scan/scanorux.f	/^      INTEGER*4    RETN,/;"	v
REVISIOND	Makefile	/^REVISIOND = 1$/;"	m
ROOTCONFIG	Makefile	/^ROOTCONFIG   := root-config$/;"	m
ROOTPROCESSORO	Makefile	/^ROOTPROCESSORO   = RootProcessor.$(ObjSuf)$/;"	m
RandomPool	include/RandomPool.hpp	/^class RandomPool {$/;"	c
RandomPool	src/RandomPool.cpp	/^RandomPool::RandomPool(void) : generator()$/;"	f	class:RandomPool
RawEvent	include/RawEvent.hpp	/^class RawEvent$/;"	c
RawEvent	src/RawEvent.cpp	/^RawEvent::RawEvent()$/;"	f	class:RawEvent
ReadBuffData	src/ReadBuffData.RevD.cpp	/^int ReadBuffData(word_t *buf, unsigned long *bufLen,$/;"	f
ReadBuffData	src/ReadBuffData.cpp	/^int ReadBuffData(word_t *buf, unsigned long *bufLen,$/;"	f
ReadCal	src/DetectorDriver.cpp	/^void DetectorDriver::ReadCal()$/;"	f	class:DetectorDriver
ReadTimingCalibration	src/TimingInformation.cpp	/^void TimingInformation::ReadTimingCalibration(void)$/;"	f	class:TimingInformation
ReadTimingConstants	src/TimingInformation.cpp	/^void TimingInformation::ReadTimingConstants(void)$/;"	f	class:TimingInformation
RemoveList	src/PixieStd.cpp	/^void RemoveList(vector<ChanEvent*> &eventList)$/;"	f
RetrieveData	src/PulserProcessor.cpp	/^bool PulserProcessor::RetrieveData(RawEvent &event)$/;"	f	class:PulserProcessor
RetrieveData	src/VandleProcessor.cpp	/^bool VandleProcessor::RetrieveData(RawEvent &event) $/;"	f	class:VandleProcessor
RootProcessor	include/RootProcessor.hpp	/^class RootProcessor : public EventProcessor$/;"	c
RootProcessor	src/RootProcessor.cpp	/^RootProcessor::RootProcessor(const char *fileName, const char *treeName)$/;"	f	class:RootProcessor
S1	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S2	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S3	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S4	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S5	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S6	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S7	include/DammPlotIds.hpp	/^const int S1 = 2, S2 = 4, S3 = 8, S4 = 16, S5 = 32, S6 = 64, S7 = 128,$/;"	v
S8	include/DammPlotIds.hpp	/^    S8 = 256, S9 = 512, SA = 1024, SB = 2048, SC = 4096,$/;"	v
S9	include/DammPlotIds.hpp	/^    S8 = 256, S9 = 512, SA = 1024, SB = 2048, SC = 4096,$/;"	v
SA	include/DammPlotIds.hpp	/^    S8 = 256, S9 = 512, SA = 1024, SB = 2048, SC = 4096,$/;"	v
SAVE	include/MersenneTwister.hpp	/^	enum { SAVE = N + 1 };  \/\/ length of array for save()$/;"	e	enum:MTRand::__anon2
SB	include/DammPlotIds.hpp	/^    S8 = 256, S9 = 512, SA = 1024, SB = 2048, SC = 4096,$/;"	v
SC	include/DammPlotIds.hpp	/^    S8 = 256, S9 = 512, SA = 1024, SB = 2048, SC = 4096,$/;"	v
SC01	scan/scanorux.f	22;"	c
SC03	scan/scanorux.f	27;"	c
SC04	scan/scanorux.f	30;"	c
SC05	scan/scanorux.f	34;"	c
SC12	scan/scanorux.f	38;"	c
SC13	scan/scanorux.f	42;"	c
SC14	scan/scanorux.f	45;"	c
SC16	scan/scanorux.f	49;"	c
SC17	scan/set2cc.f	21;"	c	subroutine:SET2CC
SC17	scan/set2cc.f	93;"	c	subroutine:GET2CC
SC18	scan/set2cc.f	100;"	c	subroutine:GET2CC
SC18	scan/set2cc.f	28;"	c	subroutine:SET2CC
SC25	scan/scanorux.f	53;"	c
SCANORUXO	Makefile	/^SCANORUXO        = scanorux.$(ObjSuf)$/;"	m
SCINTPROCESSORO	Makefile	/^SCINTPROCESSORO  = ScintProcessor.$(ObjSuf)$/;"	m
SD	include/DammPlotIds.hpp	/^    SD = 8192, SE = 16384, SF = 32768;$/;"	v
SE	include/DammPlotIds.hpp	/^    SD = 8192, SE = 16384, SF = 32768;$/;"	v
SET2CC	scan/set2cc.f	/^      SUBROUTINE SET2CC(/;"	s
SET2CCO	Makefile	/^SET2CCO          = set2cc.$(ObjSuf)$/;"	m
SET_DACS	include/pixie16app_defs.h	317;"	d
SF	include/DammPlotIds.hpp	/^    SD = 8192, SE = 16384, SF = 32768;$/;"	v
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SHMID	scan/scanorux.f	/^      INTEGER*4    SHMID$/;"	v
SLOWFILTER_MAX_LEN	include/pixie16app_defs.h	233;"	d
SSDPROCESSORO	Makefile	/^SSDPROCESSORO    = SsdProcessor.$(ObjSuf)$/;"	m
STAT	scan/scanorux.f	/^      INTEGER*4    RETN,IERR,STAT,/;"	v
STATS	include/Globals.hpp	/^    const int STATS = -10;$/;"	m	namespace:readbuff
STATSDATAO	Makefile	/^STATSDATAO       = StatsData.$(ObjSuf)$/;"	m
STRBUFEVT	scan/scanorux.f	/^      REAL*8         STRBUFEVT,/;"	v
SUMEVTS	scan/scanorux.f	/^      REAL*8         STRBUFEVT,NUMBUFEVTS,BUF_NUM,LASTEVT,SUMEVTS,/;"	v
SYSTEM_CLOCK_MHZ	include/pixie16app_defs.h	149;"	d
SanityCheck	src/DetectorDriver.cpp	/^bool DetectorDriver::SanityCheck(void) const$/;"	f	class:DetectorDriver
ScalePlot	src/Trace.cpp	/^void Trace::ScalePlot(int id, double scale)$/;"	f	class:Trace
ScalePlot	src/Trace.cpp	/^void Trace::ScalePlot(int id, int row, double scale)$/;"	f	class:Trace
ScanList	src/PixieStd.cpp	/^void ScanList(vector<ChanEvent*> &eventList) $/;"	f
ScintProcessor	include/ScintProcessor.hpp	/^class ScintProcessor : public EventProcessor,$/;"	c
ScintProcessor	src/ScintProcessor.cpp	/^ScintProcessor::ScintProcessor() : EventProcessor(OFFSET, RANGE)$/;"	f	class:ScintProcessor
ScintROOT	include/ScintROOT.hpp	/^class ScintROOT : public ScintProcessor$/;"	c
Set	src/DetectorLibrary.cpp	/^void DetectorLibrary::Set(int index, const Identifier& value)$/;"	f	class:DetectorLibrary
Set	src/DetectorLibrary.cpp	/^void DetectorLibrary::Set(int mod, int ch, const Identifier &value)$/;"	f	class:DetectorLibrary
SetCalEnergy	include/RawEvent.hpp	/^    void SetCalEnergy(double a) {calEnergy = a;} \/**< Set the calibrated energy *\/$/;"	f	class:ChanEvent
SetCalTime	include/RawEvent.hpp	/^    void SetCalTime(double a)   {calTime = a;}   \/**< Set the calibrated time *\/$/;"	f	class:ChanEvent
SetCorrectedTime	include/RawEvent.hpp	/^    void SetCorrectedTime(double a) {correctedTime = a;} \/**< Set the corrected time *\/$/;"	f	class:ChanEvent
SetDammID	include/RawEvent.hpp	/^    void SetDammID(int a)     {dammID = a;}   \/**< Set the dammid *\/$/;"	f	class:Identifier
SetEnergy	include/RawEvent.hpp	/^    void SetEnergy(double a)    {energy = a;}    \/**< Set the raw energy in case we want$/;"	f	class:ChanEvent
SetHighResTime	include/RawEvent.hpp	/^    void SetHighResTime(double a) {highResTime =a;} \/**< Set the high resolution time *\/$/;"	f	class:ChanEvent
SetLevel	include/TraceAnalyzer.hpp	/^    void SetLevel(int i) {level=i;}$/;"	f	class:TraceAnalyzer
SetLocation	include/RawEvent.hpp	/^    void SetLocation(int a)   {location = a;} \/**< Set the detector location *\/$/;"	f	class:Identifier
SetName	include/RawEvent.hpp	/^    void SetName(const std::string& a) {name = a;} \/**< Set the detector type name *\/$/;"	f	class:DetectorSummary
SetSubtype	include/RawEvent.hpp	/^    void SetSubtype(const std::string &a) {subtype = a;}  \/**< Set the detector subtype *\/$/;"	f	class:Identifier
SetTime	include/RawEvent.hpp	/^    void SetTime(double a)      {time = a;}      \/**< Set the raw time *\/$/;"	f	class:ChanEvent
SetType	include/RawEvent.hpp	/^    void SetType(const std::string &a)    {type = a;}     \/**< Set the detector type *\/$/;"	f	class:Identifier
SetType	src/ImplantSsdProcessor.cpp	/^EventInfo::EEventTypes ImplantSsdProcessor::SetType(EventInfo &info) const$/;"	f	class:ImplantSsdProcessor
SetValue	include/Trace.hpp	/^    void SetValue(std::string name, double value) {$/;"	f	class:Trace
SetValue	include/Trace.hpp	/^    void SetValue(std::string name, int value) {$/;"	f	class:Trace
Size	src/RawEvent.cpp	/^size_t RawEvent::Size() const$/;"	f	class:RawEvent
SsdProcessor	include/SsdProcessor.hpp	/^class SsdProcessor : public EventProcessor $/;"	c
SsdProcessor	src/SsdProcessor.cpp	/^SsdProcessor::SsdProcessor() : EventProcessor(OFFSET, RANGE)$/;"	f	class:SsdProcessor
StartCount	include/LogicProcessor.hpp	/^    unsigned long StartCount(size_t loc) const {$/;"	f	class:LogicProcessor
StatsAccumulator	include/StatsAccumulator.hpp	/^	StatsAccumulator(const T& t) :$/;"	f	class:StatsAccumulator
StatsAccumulator	include/StatsAccumulator.hpp	/^    StatsAccumulator(const StatsAccumulator &x) :$/;"	f	class:StatsAccumulator
StatsAccumulator	include/StatsAccumulator.hpp	/^class StatsAccumulator$/;"	c
StatsAccumulator	src/StatsAccumulator.cpp	/^StatsAccumulator::StatsAccumulator()$/;"	f	class:StatsAccumulator
StatsAccumulator	src/StatsAccumulator.cpp	/^StatsAccumulator::StatsAccumulator(double s, double ss, int c) :$/;"	f	class:StatsAccumulator
StatsData	include/RawEvent.hpp	/^class StatsData {$/;"	c
StatsData	src/StatsData.cpp	/^StatsData::StatsData()$/;"	f	class:StatsData
StopCount	include/LogicProcessor.hpp	/^    unsigned long StopCount(size_t loc) const {$/;"	f	class:LogicProcessor
TAUANALYZERO	Makefile	/^TAUANALYZERO     = TauAnalyzer.$(ObjSuf)$/;"	m
TFP	include/Trace.hpp	/^    typedef class TrapezoidalFilterParameters TFP;$/;"	t	namespace:__anon4	typeref:class:__anon4::TrapezoidalFilterParameters
TIMINGINFOO	Makefile	/^TIMINGINFOO      = TimingInformation.$(ObjSuf)$/;"	m
TOTALREAD	src/PixieStd.cpp	/^const unsigned int TOTALREAD = 1000000;$/;"	v
TRACEEXTRACTERO	Makefile	/^TRACEEXTRACTERO  = TraceExtracter.$(ObjSuf)$/;"	m
TRACEFILTERO	Makefile	/^TRACEFILTERO     = TraceFilterer.$(ObjSuf)$/;"	m
TRACEO	Makefile	/^TRACEO		 = Trace.$(ObjSuf)$/;"	m
TRACEPLOTO	Makefile	/^TRACEPLOTO       = TracePlotter.$(ObjSuf)$/;"	m
TRACESUBO	Makefile	/^TRACESUBO        = TraceAnalyzer.$(ObjSuf)$/;"	m
TRIGGERLOGICPROCESSORO	Makefile	/^TRIGGERLOGICPROCESSORO = TriggerLogicProcessor.$(ObjSuf)$/;"	m
TVANDLE_OFFSET	src/VandleProcessor.cpp	/^    const unsigned int TVANDLE_OFFSET = 70;$/;"	m	namespace:dammIds	file:
TagValue	include/RawEvent.hpp	/^    typedef int TagValue;$/;"	t	class:Identifier
TauAnalyzer	include/TauAnalyzer.hpp	/^class TauAnalyzer : public TraceAnalyzer$/;"	c
TauAnalyzer	src/TauAnalyzer.cpp	/^TauAnalyzer::TauAnalyzer() : TraceAnalyzer()$/;"	f	class:TauAnalyzer
TauAnalyzer	src/TauAnalyzer.cpp	/^TauAnalyzer::TauAnalyzer(const string &aType, const string &aSubtype) :$/;"	f	class:TauAnalyzer
ThreshAndCal	src/DetectorDriver.cpp	/^int DetectorDriver::ThreshAndCal(ChanEvent *chan)$/;"	f	class:DetectorDriver
TimeOfFlightMap	include/TimingInformation.hpp	/^    typedef std::map<unsigned int, double> TimeOfFlightMap;$/;"	t	class:TimingInformation
TimeOff	include/LogicProcessor.hpp	/^    double TimeOff(size_t loc, double t) const {$/;"	f	class:LogicProcessor
TimeOn	include/LogicProcessor.hpp	/^    double TimeOn(size_t loc, double t) const {$/;"	f	class:LogicProcessor
TimingCal	include/TimingInformation.hpp	/^    struct TimingCal {$/;"	s	class:TimingInformation
TimingCalMap	include/TimingInformation.hpp	/^    typedef std::map<IdentKey, struct TimingCal> TimingCalMap;$/;"	t	class:TimingInformation
TimingData	include/TimingInformation.hpp	/^    struct TimingData $/;"	s	class:TimingInformation
TimingData	src/TimingInformation.cpp	/^TimingInformation::TimingData::TimingData(ChanEvent *chan) : trace(chan->GetTrace())$/;"	f	class:TimingInformation::TimingData
TimingData	src/TimingInformation.cpp	/^TimingInformation::TimingData::TimingData(void) : trace(emptyTrace)$/;"	f	class:TimingInformation::TimingData
TimingDataMap	include/TimingInformation.hpp	/^    typedef std::map<IdentKey, struct TimingData> TimingDataMap;$/;"	t	class:TimingInformation
TimingInformation	include/TimingInformation.hpp	/^class TimingInformation$/;"	c
TokenToVector	src/MapFile.cpp	/^void MapFile::TokenToVector(string token, vector<int> &list, int number) const$/;"	f	class:MapFile
TokenizeString	src/MapFile.cpp	/^void MapFile::TokenizeString(const string &in, vector<string> &out) const$/;"	f	class:MapFile
Trace	include/Trace.hpp	/^    Trace() : std::vector<int>()$/;"	f	class:Trace
Trace	include/Trace.hpp	/^    Trace(const std::vector<int> &x) : std::vector<int>(x)$/;"	f	class:Trace
Trace	include/Trace.hpp	/^class Trace : public std::vector<int>$/;"	c
TraceAnalyzer	include/TraceAnalyzer.hpp	/^class TraceAnalyzer {$/;"	c
TraceAnalyzer	src/TraceAnalyzer.cpp	/^TraceAnalyzer::TraceAnalyzer() : $/;"	f	class:TraceAnalyzer
TraceAnalyzer	src/TraceAnalyzer.cpp	/^TraceAnalyzer::TraceAnalyzer(int offset, int range) : $/;"	f	class:TraceAnalyzer
TraceExtracter	include/TraceExtracter.hpp	/^class TraceExtracter : public TraceAnalyzer {$/;"	c
TraceExtracter	src/TraceExtracter.cpp	/^TraceExtracter::TraceExtracter(const std::string& aType, const std::string &aSubtype) : $/;"	f	class:TraceExtracter
TraceFilterer	include/TraceFilterer.hpp	/^class TraceFilterer : public TracePlotter {$/;"	c
TraceFilterer	src/TraceFilterer.cpp	/^TraceFilterer::TraceFilterer() : $/;"	f	class:TraceFilterer
TracePlotter	include/TracePlotter.hpp	/^class TracePlotter : public TraceAnalyzer {$/;"	c
TracePlotter	src/TracePlotter.cpp	/^TracePlotter::TracePlotter() : TraceAnalyzer()$/;"	f	class:TracePlotter
TrapezoidalFilter	include/Trace.hpp	/^    void TrapezoidalFilter(Trace &filter, const TFP &parms,$/;"	f	class:Trace
TrapezoidalFilter	src/Trace.cpp	/^void Trace::TrapezoidalFilter(Trace &filter, $/;"	f	class:Trace
TrapezoidalFilterParameters	include/Trace.hpp	/^    TrapezoidalFilterParameters(const TFP &x) :$/;"	f	class:TrapezoidalFilterParameters
TrapezoidalFilterParameters	include/Trace.hpp	/^    TrapezoidalFilterParameters(int gap, int rise, double t = NAN) :$/;"	f	class:TrapezoidalFilterParameters
TrapezoidalFilterParameters	include/Trace.hpp	/^class TrapezoidalFilterParameters$/;"	c
TriggerLogicProcessor	include/TriggerLogicProcessor.hpp	/^class TriggerLogicProcessor : public LogicProcessor {$/;"	c
TriggerLogicProcessor	src/TriggerLogicProcessor.cpp	/^TriggerLogicProcessor::TriggerLogicProcessor(void) : LogicProcessor(dammIds::triggerlogic::OFFSET, dammIds::triggerlogic::RANGE)$/;"	f	class:TriggerLogicProcessor
TstBit	src/ReadBuffData.RevD.cpp	/^unsigned long TstBit(unsigned short bit, unsigned long value)$/;"	f
TstBit	src/ReadBuffData.cpp	/^unsigned long TstBit(unsigned short bit, word_t value)$/;"	f
Tvandle	src/VandleProcessor.cpp	/^void VandleProcessor::Tvandle(void) $/;"	f	class:VandleProcessor
UNKNOWN_CONDITION	include/Correlator.hpp	/^		      UNKNOWN_CONDITION    = 100};$/;"	e	enum:Correlator::EConditions
UNKNOWN_EVENT	include/Correlator.hpp	/^		      UNKNOWN_EVENT};$/;"	e	enum:EventInfo::EEventTypes
U_DELIMITER	include/Globals.hpp	/^const pixie::word_t U_DELIMITER = (pixie::word_t)-1;$/;"	v
VALID_DECAY	include/Correlator.hpp	/^		      VALID_DECAY          = 16,$/;"	e	enum:Correlator::EConditions
VALID_IMPLANT	include/Correlator.hpp	/^		      VALID_IMPLANT        = 12,$/;"	e	enum:Correlator::EConditions
VANDLEPROCESSORO	Makefile	/^VANDLEPROCESSORO = VandleProcessor.$(ObjSuf)$/;"	m
VANDLEROOTO	Makefile	/^VANDLEROOTO      = VandleROOT.$(ObjSuf)$/;"	m
VETOSTRETCH_MAX	include/pixie16app_defs.h	250;"	d
VETOSTRETCH_MIN	include/pixie16app_defs.h	251;"	d
VandleProcessor	include/VandleProcessor.hpp	/^class VandleProcessor : public EventProcessor, $/;"	c
VandleProcessor	src/VandleProcessor.cpp	/^VandleProcessor::VandleProcessor(): EventProcessor(OFFSET, RANGE)$/;"	f	class:VandleProcessor
VandleROOT	include/VandleROOT.hpp	/^class VandleROOT : public VandleProcessor$/;"	c
WAVEFORMSUBO	Makefile	/^WAVEFORMSUBO     = WaveformAnalyzer.$(ObjSuf)$/;"	m
WalkCorrection	src/GeProcessor.cpp	/^double GeProcessor::WalkCorrection(double e) {$/;"	f	class:GeProcessor
WaveformAnalyzer	include/WaveformAnalyzer.hpp	/^class WaveformAnalyzer : public TraceAnalyzer, $/;"	c
WaveformAnalyzer	src/WaveformAnalyzer.cpp	/^WaveformAnalyzer::WaveformAnalyzer() : TraceAnalyzer() $/;"	f	class:WaveformAnalyzer
XV	scan/scanorux.f	/^      REAL*4       XV$/;"	v
Zero	src/RawEvent.cpp	/^void DetectorSummary::Zero() $/;"	f	class:DetectorSummary
Zero	src/RawEvent.cpp	/^void Identifier::Zero()$/;"	f	class:Identifier
Zero	src/RawEvent.cpp	/^void RawEvent::Zero(const set<string> &usedev)$/;"	f	class:RawEvent
ZeroNums	src/RawEvent.cpp	/^void ChanEvent::ZeroNums() $/;"	f	class:ChanEvent
ZeroVar	src/RawEvent.cpp	/^void ChanEvent::ZeroVar() $/;"	f	class:ChanEvent
__ALIASEDPAIR_HPP_	include/AliasedPair.hpp	13;"	d
__CFDANALYZER_HPP_	include/CfdAnalyzer.hpp	6;"	d
__CORRELATOR_PROCESSOR_HPP_	include/Correlator.hpp	8;"	d
__DAMM_PLOTIDS_HPP_	include/DammPlotIds.hpp	2;"	d
__DETECTORDRIVER_HPP_	include/DetectorDriver.hpp	14;"	d
__DETECTORLIBRARY_HPP_	include/DetectorLibrary.hpp	8;"	d
__DOUBLETRACEANALYZER_HPP_	include/DoubleTraceAnalyzer.hpp	8;"	d
__DSSD_PROCESSOR_HPP_	include/DssdProcessor.hpp	7;"	d
__EVENTPROCESSOR_HPP_	include/EventProcessor.hpp	8;"	d
__FITTINGANALYZER_HPP_	include/FittingAnalyzer.hpp	6;"	d
__GEPROCESSOR_HPP_	include/GeProcessor.hpp	7;"	d
__GETARGUMENTS_HPP_	include/GetArguments.hpp	10;"	d
__GLOBALS_HPP_	include/Globals.hpp	7;"	d
__IMPLANT_SSD_PROCESSOR_HPP_	include/ImplantSsdProcessor.hpp	7;"	d
__IONCHAMBERPROCESSOR_HPP_	include/IonChamberProcessor.hpp	7;"	d
__LITEPOSITIONPROCESSOR_HPP_	include/LitePositionProcessor.hpp	7;"	d
__LOGICPROCESSOR_HPP_	include/LogicProcessor.hpp	8;"	d
__MAPFILE_HPP_	include/MapFile.hpp	8;"	d
__MCPPROCESSOR_HPP_	include/McpProcessor.hpp	7;"	d
__MERSENNETWISTER_HPP_	include/MersenneTwister.hpp	58;"	d
__MTCPROCESSOR_HPP_	include/MtcProcessor.hpp	7;"	d
__PIXIE16APP_DEFS_H	include/pixie16app_defs.h	2;"	d
__PLOTSREGISTER_HPP_	include/PlotsRegister.hpp	7;"	d
__PLOTS_HPP_	include/Plots.hpp	7;"	d
__POSITIONPROCESSOR_HPP_	include/PositionProcessor.hpp	6;"	d
__PULSERPROCESSOR_HPP_	include/PulserProcessor.hpp	7;"	d
__RANDOMPOOL_HPP_	include/RandomPool.hpp	9;"	d
__RAWEVENT_HPP_	include/RawEvent.hpp	10;"	d
__ROOTPROCESSOR_HPP_	include/RootProcessor.hpp	12;"	d
__SCINTPROCESSOR_HPP_	include/ScintProcessor.hpp	7;"	d
__SCINTROOT_HPP_	include/ScintROOT.hpp	7;"	d
__SSD_PROCESSOR_HPP_	include/SsdProcessor.hpp	7;"	d
__STATS_ACCUMULATOR_HPP_	include/StatsAccumulator.hpp	10;"	d
__TAUANALYZER_HPP_	include/TauAnalyzer.hpp	7;"	d
__TIMINGINFORMATION_HPP_	include/TimingInformation.hpp	8;"	d
__TRACEANALYZER_HPP_	include/TraceAnalyzer.hpp	8;"	d
__TRACEEXTRACTER_HPP_	include/TraceExtracter.hpp	8;"	d
__TRACEFILTERER_HPP_	include/TraceFilterer.hpp	8;"	d
__TRACEPLOTTER_HPP_	include/TracePlotter.hpp	8;"	d
__TRACE_HPP_	include/Trace.hpp	9;"	d
__TRIGGERLOGICPROCESSOR_HPP_	include/TriggerLogicProcessor.hpp	8;"	d
__VANDLEPROCESSOR_HPP_	include/VandleProcessor.hpp	7;"	d
__VANDLEROOT_HPP_	include/VandleROOT.hpp	7;"	d
__WAVEFORMANALYZER_HPP_	include/WaveformAnalyzer.hpp	6;"	d
activate	include/NewCorrelator.hpp	/^        virtual void activate() {$/;"	f	class:Place
adcClockInSeconds	include/Globals.hpp	/^    const double adcClockInSeconds = 10e-9; \/\/< one ADC clock is 10 ns$/;"	m	namespace:pixie
adcClockInSeconds	include/Globals.hpp	/^    const double adcClockInSeconds = 4e-9; \/\/< one ADC clock is 10 ns$/;"	m	namespace:pixie
addChild	src/NewCorrelator.cpp	/^void Place::addChild (Place* child, bool relation) {$/;"	f	class:Place
addParent_	include/NewCorrelator.hpp	/^        virtual void addParent_ (Place* parent) {$/;"	f	class:Place
arraySize	include/Correlator.hpp	/^    static const size_t arraySize = 40; \/**< Size of the 2D array to hold the decay lists *\/$/;"	m	class:Correlator
associatedTypes	include/EventProcessor.hpp	/^    std::set<std::string> associatedTypes;    $/;"	m	class:EventProcessor
at	src/DetectorLibrary.cpp	/^DetectorLibrary::const_reference DetectorLibrary::at(DetectorLibrary::size_type idx) const$/;"	f	class:DetectorLibrary
at	src/DetectorLibrary.cpp	/^DetectorLibrary::const_reference DetectorLibrary::at(DetectorLibrary::size_type mod, DetectorLibrary::size_type ch) const$/;"	f	class:DetectorLibrary
at	src/DetectorLibrary.cpp	/^DetectorLibrary::reference DetectorLibrary::at(DetectorLibrary::size_type idx)$/;"	f	class:DetectorLibrary
at	src/DetectorLibrary.cpp	/^DetectorLibrary::reference DetectorLibrary::at(DetectorLibrary::size_type mod, DetectorLibrary::size_type ch)$/;"	f	class:DetectorLibrary
aveBaseline	include/TimingInformation.hpp	/^	Double_t aveBaseline[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
aveBaseline	include/TimingInformation.hpp	/^	double aveBaseline;$/;"	m	struct:TimingInformation::TimingData
aveTrace	include/FittingAnalyzer.hpp	/^    std::vector<double> aveTrace;$/;"	m	class:FittingAnalyzer
backSummary	include/DssdProcessor.hpp	/^    DetectorSummary *backSummary;  \/\/\/< all detectors of type dssd_back$/;"	m	class:DssdProcessor
barMap	include/VandleProcessor.hpp	/^    BarMap  barMap; $/;"	m	class:VandleProcessor
baselineHigh	include/Trace.hpp	/^    unsigned int baselineHigh;$/;"	m	class:Trace
baselineLow	include/Trace.hpp	/^    unsigned int baselineLow; $/;"	m	class:Trace
beamOn	include/Correlator.hpp	/^    bool   beamOn;   \/\/\/< beam is on target$/;"	m	struct:EventInfo
beta	include/ScintROOT.hpp	/^    DataRoot beta;$/;"	m	class:ScintROOT
betaGammaGated	src/ScintProcessor.cpp	/^            namespace betaGammaGated {$/;"	n	namespace:dammIds::scint::neutr	file:
betaGated	src/GeProcessor.cpp	/^	namespace betaGated {$/;"	n	namespace:dammIds::ge	file:
betaGated	src/ScintProcessor.cpp	/^            namespace betaGated {$/;"	n	namespace:dammIds::scint::neutr	file:
bigLeft	include/VandleROOT.hpp	/^    DataRoot bigLeft;$/;"	m	class:VandleROOT
bigMap	include/VandleProcessor.hpp	/^    TimingDataMap bigMap;$/;"	m	class:VandleProcessor
bigRight	include/VandleROOT.hpp	/^    DataRoot bigRight;$/;"	m	class:VandleROOT
boxMax	include/Correlator.hpp	/^    short  boxMax;   \/\/\/< location of maximum energy in box$/;"	m	struct:EventInfo
boxMult	include/Correlator.hpp	/^    short  boxMult;  \/\/\/< numebr of box hits$/;"	m	struct:EventInfo
bufword_t	include/Globals.hpp	/^    typedef uint32_t bufword_t; \/\/< word in a pixie buffer$/;"	t	namespace:pixie
cSrcSuf	Makefile	/^cSrcSuf   = c$/;"	m
cal	include/DetectorDriver.hpp	/^    vector<Calibration> cal;    \/**<the calibration vector*\/ $/;"	m	class:DetectorDriver
cal	include/IonChamberProcessor.hpp	/^    double cal[noDets];$/;"	m	struct:IonChamberProcessor::Data
calEnergy	include/RawEvent.hpp	/^    double calEnergy;          \/**< Calibrated channel energy,$/;"	m	class:ChanEvent
calTime	include/RawEvent.hpp	/^    double calTime;            \/**< Calibrated time, currently unused *\/$/;"	m	class:ChanEvent
calibrationMap	include/TimingInformation.hpp	/^    static TimingCalMap calibrationMap;$/;"	m	class:TimingInformation
calibrationMap	src/TimingInformation.cpp	/^TimingInformation::TimingCalMap TimingInformation::calibrationMap;$/;"	m	class:TimingInformation	file:
cfdTime	include/RawEvent.hpp	/^    pixie::word_t cfdTime;     \/**< CFD trigger time in units of 1\/256 pixie clock ticks *\/$/;"	m	class:ChanEvent
chanNum	include/RawEvent.hpp	/^    int    chanNum;            \/**< Channel number *\/$/;"	m	class:ChanEvent
chansPerClover	include/GeProcessor.hpp	/^    static const unsigned int chansPerClover = 4; \/*!< number of channels per clover *\/$/;"	m	class:GeProcessor
check	include/GeProcessor.hpp	/^        bool check() {$/;"	f	class:GGate
checkChildren	src/NewCorrelator.cpp	/^bool Place::checkChildren(Place* child) {$/;"	f	class:Place
checkParents	src/NewCorrelator.cpp	/^bool Place::checkParents(Place* child) {$/;"	f	class:Place
check_	src/NewCorrelator.cpp	/^void PlaceAND::check_() {$/;"	f	class:PlaceAND
check_	src/NewCorrelator.cpp	/^void PlaceBasic::check_() {$/;"	f	class:PlaceBasic
check_	src/NewCorrelator.cpp	/^void PlaceOR::check_() {$/;"	f	class:PlaceOR
children_	include/NewCorrelator.hpp	/^        vector< pair<Place*, bool> > children_;$/;"	m	class:Place
clear	src/Correlator.cpp	/^void CorrelationList::clear()$/;"	f	class:CorrelationList
clockCount	include/Correlator.hpp	/^    unsigned long clockCount;$/;"	m	struct:EventInfo
clockInSeconds	include/Globals.hpp	/^    const double clockInSeconds = 10e-9; \/\/< one pixie clock is 10 ns$/;"	m	namespace:pixie
clockInSeconds	include/Globals.hpp	/^    const double clockInSeconds = 8e-9; \/\/< one pixie clock is 10 ns$/;"	m	namespace:pixie
clockVsn	include/Globals.hpp	/^const pixie::word_t clockVsn = 1000; \/\/\/< an arbitrary vsn used to pass clock data$/;"	v
clocksPerSecond	include/EventProcessor.hpp	/^    double clocksPerSecond;$/;"	m	class:EventProcessor
clocksPerSecond	include/TraceAnalyzer.hpp	/^    double clocksPerSecond;   \/\/\/< frequency of system clock$/;"	m	class:TraceAnalyzer
condition	include/Correlator.hpp	/^    EConditions condition;     \/\/\/< condition for last processed event$/;"	m	class:Correlator
configFile	include/LitePositionProcessor.hpp	/^    static const std::string configFile;$/;"	m	class:LitePositionProcessor
configFile	include/PositionProcessor.hpp	/^    static const std::string configFile;$/;"	m	class:PositionProcessor
constants	include/Trace.hpp	/^    TimingInformation constants;$/;"	m	class:Trace
constantsMap	include/TimingInformation.hpp	/^    static std::map<std::string, double> constantsMap;$/;"	m	class:TimingInformation
corTimeOfFlight	include/TimingInformation.hpp	/^	std::map<unsigned int, double> corTimeOfFlight;$/;"	m	struct:TimingInformation::BarData
corrTime	include/Correlator.hpp	/^    static const double corrTime;   \/**< The maximum amount of time allowed$/;"	m	class:Correlator
corrTime	src/Correlator.cpp	/^const double Correlator::corrTime   = 60; \/\/ used to be 3300$/;"	m	class:Correlator	file:
correctedTime	include/RawEvent.hpp	/^    double correctedTime;      \/**< Energy-walk corrected time *\/$/;"	m	class:ChanEvent
correlator	include/DammPlotIds.hpp	/^    namespace correlator {$/;"	n	namespace:dammIds
correlator	include/RawEvent.hpp	/^    Correlator correlator;                         \/**< class to correlate decay data with implantation data *\/$/;"	m	class:RawEvent
correlator	src/Correlator.cpp	/^    namespace correlator {$/;"	n	namespace:dammIds	file:
count	include/StatsAccumulator.hpp	/^    int count;    \/\/< the number of values$/;"	m	class:StatsAccumulator
counter	include/FittingAnalyzer.hpp	/^    unsigned int counter;$/;"	m	class:FittingAnalyzer
counter	include/RandomPool.hpp	/^  size_t counter;       \/\/\/< current random number index$/;"	m	class:RandomPool
counter	include/ScintProcessor.hpp	/^   unsigned int counter;$/;"	m	class:ScintProcessor
counter	include/VandleProcessor.hpp	/^    int counter;$/;"	m	class:VandleProcessor
crossTalk	include/VandleProcessor.hpp	/^    std::map<CrossTalkKey, double> crossTalk;$/;"	m	class:VandleProcessor
cutoffEnergy	include/DssdProcessor.hpp	/^    static const double cutoffEnergy; \/\/\/< cutoff energy for implants versus decays$/;"	m	class:DssdProcessor
cutoffEnergy	include/ImplantSsdProcessor.hpp	/^    static const double cutoffEnergy; \/\/\/< cutoff energy for implants versus decays$/;"	m	class:ImplantSsdProcessor
cutoffEnergy	src/DssdProcessor.cpp	/^const double DssdProcessor::cutoffEnergy = 4500;$/;"	m	class:DssdProcessor	file:
cutoffEnergy	src/ImplantSsdProcessor.cpp	/^const double ImplantSsdProcessor::cutoffEnergy  = 1500;$/;"	m	class:ImplantSsdProcessor	file:
cxxSrcSuf	Makefile	/^cxxSrcSuf = cxx$/;"	m
dammID	include/RawEvent.hpp	/^    int dammID;            \/**< Damm spectrum number for plotting calibrated energies *\/$/;"	m	class:Identifier
dammIds	include/DammPlotIds.hpp	/^namespace dammIds {$/;"	n
dammIds	include/IonChamberProcessor.hpp	/^namespace dammIds$/;"	n
dammIds	src/Correlator.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/DssdProcessor.cpp	/^namespace dammIds { $/;"	n	file:
dammIds	src/FittingAnalyzer.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/GeProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/ImplantSsdProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/LitePositionProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/LogicProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/McpProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/MtcProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/PositionProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/PulserProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/ScintProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/SsdProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/Trace.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/TriggerLogicProcessor.cpp	/^namespace dammIds {$/;"	n	file:
dammIds	src/VandleProcessor.cpp	/^namespace dammIds {$/;"	n	file:
data	include/IonChamberProcessor.hpp	/^  } data;$/;"	m	class:IonChamberProcessor	typeref:struct:IonChamberProcessor::Data
data	include/McpProcessor.hpp	/^  } data;$/;"	m	class:McpProcessor	typeref:struct:McpProcessor::McpData
data	include/RawEvent.hpp	/^    pixie::word_t data[maxVsn][statSize];    \/**< Statistics data from each module *\/$/;"	m	class:StatsData
dataValid	include/TimingInformation.hpp	/^	bool dataValid;$/;"	m	struct:TimingInformation::TimingData
deactivate	include/NewCorrelator.hpp	/^        virtual void deactivate() {$/;"	f	class:Place
decay	include/FittingAnalyzer.hpp	/^	double decay;$/;"	m	struct:FittingAnalyzer::FitData
decayTime	include/VandleProcessor.hpp	/^    double decayTime;$/;"	m	class:VandleProcessor
decaylist	include/Correlator.hpp	/^    CorrelationList decaylist[arraySize][arraySize]; \/\/\/< list of event data for a particular pixel since implant$/;"	m	class:Correlator
defaultFile	include/MapFile.hpp	/^    static const std::string defaultFile; \/\/\/< default map file$/;"	m	class:MapFile
defaultFilterFile	include/TraceFilterer.hpp	/^    static const std::string defaultFilterFile;$/;"	m	class:TraceFilterer
defaultFilterFile	src/TraceFilterer.cpp	/^const string TraceFilterer::defaultFilterFile = "filter.txt";$/;"	m	class:TraceFilterer	file:
detLocation	include/DetectorDriver.hpp	/^    int detLocation;        \/**< physical location of detector (strip#, det#) *\/$/;"	m	class:Calibration
detSubtype	include/DetectorDriver.hpp	/^    string detSubtype;      \/**< sub type of detector *\/$/;"	m	class:Calibration
detType	include/DetectorDriver.hpp	/^    string detType;         \/**< type of detector *\/$/;"	m	class:Calibration
detectorend_	src/DetectorDriver.cpp	/^extern "C" void detectorend_()$/;"	f
didProcess	include/EventProcessor.hpp	/^    bool didProcess;$/;"	m	class:EventProcessor
discrimination	include/TimingInformation.hpp	/^	Double_t discrimination[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
discrimination	include/TimingInformation.hpp	/^	double discrimination;$/;"	m	struct:TimingInformation::TimingData
doubleTraceData	include/Trace.hpp	/^    std::map<std::string, double> doubleTraceData;$/;"	m	class:Trace
driver	src/PixieStd.cpp	/^DetectorDriver driver;$/;"	v
drrsub_	src/DeclareHistogram.cpp	/^extern "C" void drrsub_(unsigned int& iexist)$/;"	f
dssd	include/DammPlotIds.hpp	/^    namespace dssd {$/;"	n	namespace:dammIds
dssd	src/DssdProcessor.cpp	/^    namespace dssd {$/;"	n	namespace:dammIds	file:
dtime	include/Correlator.hpp	/^    double dtime;    \/\/\/< time since implant [pixie units]$/;"	m	struct:EventInfo
dummy	include/TimingInformation.hpp	/^	UInt_t   dummy;$/;"	m	struct:TimingInformation::DataRoot
emptyLocations	include/DetectorLibrary.hpp	/^    static std::set<int> emptyLocations; \/\/\/< dummy locations to return when map key does not exist$/;"	m	class:DetectorLibrary
emptyString	include/Globals.hpp	/^const std::string emptyString = ""; \/\/< an empty string for blank references$/;"	v
emptyTrace	src/Trace.cpp	/^const Trace emptyTrace; \/\/\/< an empty trace for const references to point to$/;"	v
emptyValue	include/Globals.hpp	/^const double emptyValue = -9999.; \/\/< a default number to set values to$/;"	v
energy	include/Correlator.hpp	/^    double energy;   \/\/\/< energy of event$/;"	m	struct:EventInfo
energy	include/RawEvent.hpp	/^    double energy;             \/**< Raw channel energy *\/$/;"	m	class:ChanEvent
energy	include/TimingInformation.hpp	/^	std::map<unsigned int, double> energy;$/;"	m	struct:TimingInformation::BarData
energy	include/TraceFilterer.hpp	/^	double energy;$/;"	m	struct:TraceFilterer::PulseInfo
energy2	include/DoubleTraceAnalyzer.hpp	/^    double energy2;         \/\/\/< energy of second pulse$/;"	m	class:DoubleTraceAnalyzer
energyBins	include/TraceFilterer.hpp	/^    static const int energyBins;$/;"	m	class:TraceFilterer
energyBins	src/TraceFilterer.cpp	/^const int TraceFilterer::energyBins = SC;$/;"	m	class:TraceFilterer	file:
energyBox	include/Correlator.hpp	/^    double energyBox; \/\/\/< energy depositied into the box$/;"	m	struct:EventInfo
energyFilter	include/TraceFilterer.hpp	/^    Trace energyFilter; \/\/\/< slow filter of trace$/;"	m	class:TraceFilterer
energyParms	include/TraceFilterer.hpp	/^    TrapezoidalFilterParameters  energyParms;$/;"	m	class:TraceFilterer
energyScaleFactor	include/TraceFilterer.hpp	/^    static const double energyScaleFactor;$/;"	m	class:TraceFilterer
energyScaleFactor	src/TraceFilterer.cpp	/^const double TraceFilterer::energyScaleFactor = 2.198; \/\/< TO BE USED WITH MAGIC +40 ENERGY SAMPLE LOCATION$/;"	m	class:TraceFilterer	file:
event	include/TimingInformation.hpp	/^        bool event;$/;"	m	struct:TimingInformation::BarData
eventList	include/RawEvent.hpp	/^    std::vector<ChanEvent*> eventList;             \/**< Pointers to all the channels that are close$/;"	m	class:RawEvent
eventList	include/RawEvent.hpp	/^    std::vector<ChanEvent*> eventList; \/**< list of events associated with this detector group *\/$/;"	m	class:DetectorSummary
eventTime	include/RawEvent.hpp	/^    double eventTime;          \/**< The event time recorded by Pixie *\/$/;"	m	class:ChanEvent
eventTimeHi	include/RawEvent.hpp	/^    pixie::word_t eventTimeHi; \/**< Upper 32 bits of pixie16 event time *\/$/;"	m	class:ChanEvent
eventTimeLo	include/RawEvent.hpp	/^    pixie::word_t eventTimeLo; \/**< Lower 32 bits of pixie16 event time *\/$/;"	m	class:ChanEvent
fSrcSuf	Makefile	/^fSrcSuf   = f$/;"	m
fastFilter	include/TraceFilterer.hpp	/^    Trace fastFilter;   \/\/\/< fast filter of trace$/;"	m	class:TraceFilterer
fastParms	include/TraceFilterer.hpp	/^    TrapezoidalFilterParameters  fastParms;$/;"	m	class:TraceFilterer
fastThreshold	include/TraceFilterer.hpp	/^    Trace::value_type            fastThreshold;$/;"	m	class:TraceFilterer
fastTime	include/Correlator.hpp	/^    static const double fastTime;   \/**< Times shorter than this are output as a fast decay *\/$/;"	m	class:Correlator
fastTime	src/Correlator.cpp	/^const double Correlator::fastTime   = 40e-6;$/;"	m	class:Correlator	file:
fastTracesWritten	include/ImplantSsdProcessor.hpp	/^    unsigned int fastTracesWritten;$/;"	m	class:ImplantSsdProcessor
file	include/RootProcessor.hpp	/^    TFile *file; \/\/< File where tree is stored$/;"	m	class:RootProcessor
filterClockInSeconds	include/Globals.hpp	/^    const double filterClockInSeconds = 10e-9; \/\/< one filter clock is 10 ns$/;"	m	namespace:pixie
filterClockInSeconds	include/Globals.hpp	/^    const double filterClockInSeconds = 8e-9; \/\/< one filter clock is 10 ns$/;"	m	namespace:pixie
firstTime	include/RawEvent.hpp	/^    double firstTime; \/**< Store the time of the first statistics block *\/$/;"	m	class:StatsData
fissionThresh	include/ImplantSsdProcessor.hpp	/^    static const double fissionThresh; \/\/\/< minimum energy for a fission event$/;"	m	class:ImplantSsdProcessor
fissionThresh	src/ImplantSsdProcessor.cpp	/^const double ImplantSsdProcessor::fissionThresh = 4400;$/;"	m	class:ImplantSsdProcessor	file:
fittedParameters	include/FittingAnalyzer.hpp	/^    std::vector<double> fittedParameters;$/;"	m	class:FittingAnalyzer
fittedTrace	include/FittingAnalyzer.hpp	/^    std::vector<double> fittedTrace;$/;"	m	class:FittingAnalyzer
flagged	include/Correlator.hpp	/^    bool   flagged;  \/\/\/< flagged of interest$/;"	m	struct:EventInfo
flagged	include/Correlator.hpp	/^    bool flagged;$/;"	m	class:CorrelationList
flightPath	include/TimingInformation.hpp	/^	double flightPath;$/;"	m	struct:TimingInformation::BarData
foilTime	include/Correlator.hpp	/^    double foilTime; \/\/\/< time difference to foil event$/;"	m	struct:EventInfo
frontSummary	include/DssdProcessor.hpp	/^    DetectorSummary *frontSummary; \/\/\/< all detectors of type dssd_front$/;"	m	class:DssdProcessor
g1max	include/GeProcessor.hpp	/^        double g1max;$/;"	m	class:GGate
g1min	include/GeProcessor.hpp	/^        double g1min;$/;"	m	class:GGate
g2max	include/GeProcessor.hpp	/^        double g2max;$/;"	m	class:GGate
g2min	include/GeProcessor.hpp	/^        double g2min;$/;"	m	class:GGate
gGates	include/GeProcessor.hpp	/^    vector< GGate > gGates;$/;"	m	class:GeProcessor
gammaGated	src/ScintProcessor.cpp	/^            namespace gammaGated {$/;"	n	namespace:dammIds::scint::neutr	file:
gapSamples	include/Trace.hpp	/^    Trace::size_type gapSamples;$/;"	m	class:TrapezoidalFilterParameters
ge	include/DammPlotIds.hpp	/^    namespace ge {$/;"	n	namespace:dammIds
ge	src/GeProcessor.cpp	/^    namespace ge {$/;"	n	namespace:dammIds	file:
generation	include/Correlator.hpp	/^    short  generation; \/\/\/< generation number (0 = implant)$/;"	m	struct:EventInfo
generator	include/RandomPool.hpp	/^  MTRand generator;     \/\/\/< random number generator$/;"	m	class:RandomPool
goodAlphaCut	include/ImplantSsdProcessor.hpp	/^    static const double goodAlphaCut; \/\/\/< interesting alpha energy$/;"	m	class:ImplantSsdProcessor
goodAlphaCut	src/ImplantSsdProcessor.cpp	/^const double ImplantSsdProcessor::goodAlphaCut  = 950;$/;"	m	class:ImplantSsdProcessor	file:
granploty	src/GeProcessor.cpp	/^void GeProcessor::granploty(int dammId, double x, double y, const vector<float> &granularity)$/;"	f	class:GeProcessor
halfword_t	include/Globals.hpp	/^    typedef uint16_t halfword_t; \/\/< a half pixie word$/;"	t	namespace:pixie
hasDecay	include/VandleProcessor.hpp	/^    bool hasDecay;$/;"	m	class:VandleProcessor
hasTof	include/Correlator.hpp	/^    bool   hasTof;   \/\/\/< has time of flight data$/;"	m	struct:EventInfo
hasVeto	include/Correlator.hpp	/^    bool   hasVeto;  \/\/\/< veto detector has been hit$/;"	m	struct:EventInfo
hash	include/MersenneTwister.hpp	/^inline MTRand::uint32 MTRand::hash( time_t t, clock_t c )$/;"	f	class:MTRand
headerLength	include/RawEvent.hpp	/^    static const pixie::word_t headerLength = 1;$/;"	m	class:StatsData
hiBit	include/MersenneTwister.hpp	/^	uint32 hiBit( const uint32& u ) const { return u & 0x80000000UL; }$/;"	f	class:MTRand
highResTime	include/RawEvent.hpp	/^    double highResTime;        \/**< timing resolution less than 1 adc size *\/$/;"	m	class:ChanEvent
highResTime	include/TimingInformation.hpp	/^	Double_t highResTime[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
highResTime	include/TimingInformation.hpp	/^	double highResTime;$/;"	m	struct:TimingInformation::TimingData
highTracesWritten	include/ImplantSsdProcessor.hpp	/^    unsigned int highTracesWritten;$/;"	m	class:ImplantSsdProcessor
hissub_	src/PixieStd.cpp	/^extern "C" void hissub_(unsigned short *sbuf[],unsigned short *nhw)$/;"	f
hissub_sec	src/PixieStd.cpp	/^void hissub_sec(word_t *ibuf[],unsigned int *nhw)$/;"	f
histo	include/Correlator.hpp	/^    Plots histo;$/;"	m	class:Correlator
histo	include/DetectorDriver.hpp	/^    Plots histo;$/;"	m	class:DetectorDriver
histo	include/EventProcessor.hpp	/^    Plots histo;$/;"	m	class:EventProcessor
histo	include/Trace.hpp	/^    static Plots histo; \/\/< EMPTY PLOTS for Plotting interface$/;"	m	class:Trace
histo	include/TraceAnalyzer.hpp	/^    Plots histo;$/;"	m	class:TraceAnalyzer
id	include/DetectorDriver.hpp	/^    int id;                 \/**< id of the detector determined as module # * 16 + channel number *\/$/;"	m	class:Calibration
idList	include/Plots.hpp	/^    std::set <int> idList;$/;"	m	class:Plots
impMult	include/Correlator.hpp	/^    short  impMult;  \/\/\/< number of implant hits$/;"	m	struct:EventInfo
implantSsd	include/DammPlotIds.hpp	/^    namespace implantSsd {$/;"	n	namespace:dammIds
implantSsd	src/ImplantSsdProcessor.cpp	/^    namespace implantSsd {$/;"	n	namespace:dammIds	file:
implantTof	include/ImplantSsdProcessor.hpp	/^    static const double implantTof;   \/\/\/< minimum time-of-flight for an implant$/;"	m	class:ImplantSsdProcessor
implantTof	src/ImplantSsdProcessor.cpp	/^const double ImplantSsdProcessor::implantTof    = 2800;$/;"	m	class:ImplantSsdProcessor	file:
initDone	include/EventProcessor.hpp	/^    bool initDone;$/;"	m	class:EventProcessor
initialize	include/MersenneTwister.hpp	/^inline void MTRand::initialize( const uint32 seed )$/;"	f	class:MTRand
intTraceData	include/Trace.hpp	/^    std::map<std::string, int>    intTraceData;$/;"	m	class:Trace
ionChamber	include/DammPlotIds.hpp	/^    namespace ionChamber{ $/;"	n	namespace:dammIds
ionChamber	include/IonChamberProcessor.hpp	/^  namespace ionChamber {$/;"	n	namespace:dammIds
isBig	include/VandleROOT.hpp	/^    bool isBig;$/;"	m	class:VandleROOT
isFound	include/TraceFilterer.hpp	/^	bool isFound;$/;"	m	struct:TraceFilterer::PulseInfo
isRead	include/MapFile.hpp	/^    bool isRead;$/;"	m	class:MapFile
isSmall	include/VandleROOT.hpp	/^    bool isSmall;$/;"	m	class:VandleROOT
knownDetectors	include/DetectorDriver.hpp	/^    set<string> knownDetectors; \/**< list of valid detectors that can $/;"	m	class:DetectorDriver
knownDetectors	include/DetectorLibrary.hpp	/^    std::set<std::string> knownDetectors;$/;"	m	class:DetectorLibrary
lMaxVal	include/TimingInformation.hpp	/^	double lMaxVal;$/;"	m	struct:TimingInformation::BarData
lastDecay	include/Correlator.hpp	/^    EventInfo   *lastDecay;    \/\/\/< last decay procssed by correlator$/;"	m	class:Correlator
lastImplant	include/Correlator.hpp	/^    EventInfo   *lastImplant;  \/\/\/< last implant processed by correlator$/;"	m	class:Correlator
lastStartTime	include/LogicProcessor.hpp	/^    std::vector<double> lastStartTime; \/\/< time of last leading edge$/;"	m	class:LogicProcessor
lastStartTime	include/MtcProcessor.hpp	/^    double lastStartTime; \/\/< time of last leading edge$/;"	m	class:MtcProcessor
lastStopTime	include/LogicProcessor.hpp	/^    std::vector<double> lastStopTime;  \/\/< time of last trailing edge$/;"	m	class:LogicProcessor
lastStopTime	include/MtcProcessor.hpp	/^    double lastStopTime;  \/\/< time of last trailing edge$/;"	m	class:MtcProcessor
lastTime	include/IonChamberProcessor.hpp	/^  double lastTime[noDets];$/;"	m	class:IonChamberProcessor
leafToClover	include/GeProcessor.hpp	/^    std::map<int, int> leafToClover;   \/*!< Translate a leaf location to a clover number *\/$/;"	m	class:GeProcessor
left	include/MersenneTwister.hpp	/^	int left;          \/\/ number of values left before reload needed$/;"	m	class:MTRand
level	include/TraceAnalyzer.hpp	/^    int level;                \/\/\/< the level of analysis to proceed with$/;"	m	class:TraceAnalyzer
liquid	include/ScintROOT.hpp	/^    DataRoot liquid;$/;"	m	class:ScintROOT
loBit	include/MersenneTwister.hpp	/^	uint32 loBit( const uint32& u ) const { return u & 0x00000001UL; }$/;"	f	class:MTRand
loBits	include/MersenneTwister.hpp	/^	uint32 loBits( const uint32& u ) const { return u & 0x7fffffffUL; }$/;"	f	class:MTRand
load	include/MersenneTwister.hpp	/^inline void MTRand::load( uint32 *const loadArray )$/;"	f	class:MTRand
location	include/RawEvent.hpp	/^    int location;          \/**< Specifies the real world location of the channel.$/;"	m	class:Identifier
location	include/TimingInformation.hpp	/^	UInt_t   location[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
locations	include/DetectorLibrary.hpp	/^    std::map< mapkey_t, std::set<int> > locations; \/\/\/< collection of all used locations for a given type and subtype$/;"	m	class:DetectorLibrary
logic	include/DammPlotIds.hpp	/^    namespace logic {$/;"	n	namespace:dammIds
logic	src/LogicProcessor.cpp	/^    namespace logic {$/;"	n	namespace:dammIds	file:
logicBits	include/Correlator.hpp	/^    unsigned char logicBits[dammIds::logic::MAX_LOGIC+1];$/;"	m	struct:EventInfo
logicStatus	include/LogicProcessor.hpp	/^    std::vector<bool>   logicStatus;   \/\/< current level of the logic signal$/;"	m	class:LogicProcessor
lrtOffset	include/TimingInformation.hpp	/^	double lrtOffset;$/;"	m	struct:TimingInformation::TimingCal
mapkey_t	include/DetectorLibrary.hpp	/^    typedef std::string mapkey_t;$/;"	t	class:DetectorLibrary
matchingTimeCut	include/PositionProcessor.hpp	/^    static const int matchingTimeCut = 5; \/\/< maximum difference between edge and sum timestamps$/;"	m	class:PositionProcessor
maxConfigLineLength	include/Globals.hpp	/^const size_t maxConfigLineLength = 100;$/;"	v
maxEvent	include/RawEvent.hpp	/^    ChanEvent* maxEvent;               \/**< event with maximum energy deposition *\/$/;"	m	class:DetectorSummary
maxMultiplicity	include/TimingInformation.hpp	/^	static const size_t maxMultiplicity = 10;$/;"	m	struct:TimingInformation::DataRoot
maxNormQdc	include/LitePositionProcessor.hpp	/^    std::vector<float> maxNormQdc; \/\/< the maximum normalized qdc observed for a location$/;"	m	class:LitePositionProcessor
maxNormQdc	include/PositionProcessor.hpp	/^    std::vector<float> maxNormQdc; \/\/< the maximum normalized qdc observed for a location$/;"	m	class:PositionProcessor
maxNumLocations	include/PositionProcessor.hpp	/^    static const int maxNumLocations = 12;$/;"	m	class:PositionProcessor
maxVsn	include/RawEvent.hpp	/^    static const size_t maxVsn = 14;$/;"	m	class:StatsData
maxWords	src/PixieStd.cpp	/^const unsigned int maxWords = EXTERNAL_FIFO_LENGTH; \/\/Revision D$/;"	v
maxWords	src/PixieStd.cpp	/^const unsigned int maxWords = IO_BUFFER_LENGTH; \/\/ Revision A$/;"	v
maxpos	include/TimingInformation.hpp	/^	Double_t maxpos[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
maxpos	include/TimingInformation.hpp	/^	double maxpos;$/;"	m	struct:TimingInformation::TimingData
maxval	include/TimingInformation.hpp	/^	Double_t maxval[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
maxval	include/TimingInformation.hpp	/^	double maxval;$/;"	m	struct:TimingInformation::TimingData
mcp	include/DammPlotIds.hpp	/^    namespace mcp {	$/;"	n	namespace:dammIds
mcp	src/McpProcessor.cpp	/^    namespace mcp {	$/;"	n	namespace:dammIds	file:
mcpMult	include/Correlator.hpp	/^    short  mcpMult;  \/\/\/< number of mcp hits$/;"	m	struct:EventInfo
message_	include/NewCorrelator.hpp	/^    const string message_;$/;"	m	class:GeneralException
minImpTime	include/Correlator.hpp	/^    static const double minImpTime; \/**< The minimum amount of time that must$/;"	m	class:Correlator
minImpTime	src/Correlator.cpp	/^const double Correlator::minImpTime = 5e-3;$/;"	m	class:Correlator	file:
minNormQdc	include/LitePositionProcessor.hpp	/^    std::vector<float> minNormQdc; \/\/< the minimum normalized qdc observed for a location$/;"	m	class:LitePositionProcessor
minNormQdc	include/PositionProcessor.hpp	/^    std::vector<float> minNormQdc; \/\/< the minimum normalized qdc observed for a location$/;"	m	class:PositionProcessor
minTime	include/IonChamberProcessor.hpp	/^  static const double minTime;$/;"	m	class:IonChamberProcessor
minTime	src/IonChamberProcessor.cpp	/^const double IonChamberProcessor::minTime = 18.0e-6 \/ clockInSeconds;$/;"	m	class:IonChamberProcessor	file:
mixBits	include/MersenneTwister.hpp	/^	uint32 mixBits( const uint32& u, const uint32& v ) const$/;"	f	class:MTRand
mneList	include/Plots.hpp	/^    std::map <std::string, int> mneList;$/;"	m	class:Plots
modChan	src/MapFile.cpp	/^DetectorLibrary modChan;$/;"	v
modNum	include/RawEvent.hpp	/^    int    modNum;             \/**< Module number *\/$/;"	m	class:ChanEvent
mtc	include/DammPlotIds.hpp	/^    namespace mtc {$/;"	n	namespace:dammIds
mtc	src/MtcProcessor.cpp	/^    namespace mtc {$/;"	n	namespace:dammIds	file:
mult	include/IonChamberProcessor.hpp	/^    int mult;$/;"	m	struct:IonChamberProcessor::Data
mult	include/McpProcessor.hpp	/^    int mult;$/;"	m	struct:McpProcessor::McpData
multiplicity	include/TimingInformation.hpp	/^	UInt_t   multiplicity;$/;"	m	struct:TimingInformation::DataRoot
n	include/FittingAnalyzer.hpp	/^	size_t n;$/;"	m	struct:FittingAnalyzer::FitData
nPos	include/McpProcessor.hpp	/^  static const size_t nPos = 4;$/;"	m	class:McpProcessor
name	include/EventProcessor.hpp	/^    std::string name;$/;"	m	class:EventProcessor
name	include/RawEvent.hpp	/^    std::string name;                  \/**< name associated with this summary *\/$/;"	m	class:DetectorSummary
name	include/TraceAnalyzer.hpp	/^    std::string name;         \/\/\/< name of the analyzer$/;"	m	class:TraceAnalyzer
neutr	src/ScintProcessor.cpp	/^        namespace neutr {$/;"	n	namespace:dammIds::scint	file:
noDets	include/IonChamberProcessor.hpp	/^  static const size_t noDets = 6;$/;"	m	class:IonChamberProcessor
nonemptyList	include/Plots.hpp	/^    std::set <int> nonemptyList;$/;"	m	class:Plots
nullSummaries	include/RawEvent.hpp	/^    mutable std::set<std::string> nullSummaries;   \/**< Summaries which were requested but don't exist *\/$/;"	m	class:RawEvent
numBinsBaseline	include/Trace.hpp	/^    static const unsigned int numBinsBaseline = 15;$/;"	m	class:Trace
numCal	include/DetectorDriver.hpp	/^    unsigned int numCal;    \/**< the number of calibrations for this channel *\/$/;"	m	class:Calibration
numClovers	include/GeProcessor.hpp	/^    unsigned int numClovers;           \/*!< number of clovers in map *\/$/;"	m	class:GeProcessor
numDoubleTraces	include/DoubleTraceAnalyzer.hpp	/^    int numDoubleTraces; \/\/\/< number of double traces found$/;"	m	class:DoubleTraceAnalyzer
numLocations	include/LitePositionProcessor.hpp	/^    int numLocations;$/;"	m	class:LitePositionProcessor
numLocations	include/PositionProcessor.hpp	/^    int numLocations;$/;"	m	class:PositionProcessor
numModules	include/DetectorLibrary.hpp	/^    unsigned int numModules;$/;"	m	class:DetectorLibrary
numPhysicalModules	include/DetectorLibrary.hpp	/^    unsigned int numPhysicalModules;$/;"	m	class:DetectorLibrary
numQdcs	include/LitePositionProcessor.hpp	/^    static const int numQdcs = 8;$/;"	m	class:LitePositionProcessor
numQdcs	include/PositionProcessor.hpp	/^    static const int numQdcs = 8;$/;"	m	class:PositionProcessor
numQdcs	include/RawEvent.hpp	/^    static const int numQdcs = 8;     \/**< Number of QDCs onboard *\/$/;"	m	class:ChanEvent
numTraces	include/ImplantSsdProcessor.hpp	/^    static const unsigned int numTraces = 100;$/;"	m	class:ImplantSsdProcessor
numTraces	include/TraceExtracter.hpp	/^    static const int numTraces;$/;"	m	class:TraceExtracter
numTraces	include/TracePlotter.hpp	/^    static const int numTraces;$/;"	m	class:TracePlotter
numTraces	src/TraceExtracter.cpp	/^const int TraceExtracter::numTraces = 99;$/;"	m	class:TraceExtracter	file:
numTraces	src/TracePlotter.cpp	/^const int TracePlotter::numTraces = S5;$/;"	m	class:TracePlotter	file:
numTracesAnalyzed	include/TraceAnalyzer.hpp	/^    int numTracesAnalyzed;    \/\/\/< rownumber for DAMM spectrum 850$/;"	m	class:TraceAnalyzer
numberOfChannels	include/Globals.hpp	/^    const size_t numberOfChannels = 16; \/\/< number of channels in a module$/;"	m	namespace:pixie
numbers	include/RandomPool.hpp	/^  double numbers[size]; \/\/\/< the pool of random numbers$/;"	m	class:RandomPool
offTime	include/Correlator.hpp	/^    double offTime;  \/\/\/< length of time beam has been off$/;"	m	struct:EventInfo
offset	include/Plots.hpp	/^    int offset;$/;"	m	class:Plots
oldData	include/RawEvent.hpp	/^    pixie::word_t oldData[maxVsn][statSize]; \/**< Older statistics data to calculate the change in statistics *\/$/;"	m	class:StatsData
operator !=	include/RawEvent.hpp	/^    bool operator!=(const Identifier &x) const {$/;"	f	class:Identifier
operator &&	include/NewCorrelator.hpp	/^        virtual bool operator&& (const Place& right) const {$/;"	f	class:Place
operator ()	include/MersenneTwister.hpp	/^	double operator()() { return rand(); }  \/\/ same as rand()$/;"	f	class:MTRand
operator ()	include/NewCorrelator.hpp	/^        virtual bool operator() () const {$/;"	f	class:Place
operator +	include/NewCorrelator.hpp	/^        virtual void operator+() {$/;"	f	class:Place
operator +	src/StatsAccumulator.cpp	/^StatsAccumulator StatsAccumulator::operator+$/;"	f	class:StatsAccumulator
operator +=	include/StatsAccumulator.hpp	/^    const StatsAccumulator& operator+=(const StatsAccumulator &x)$/;"	f	class:StatsAccumulator
operator -	include/NewCorrelator.hpp	/^        virtual void operator-() {$/;"	f	class:Place
operator <	src/RawEvent.cpp	/^bool operator<(const DetectorSummary &a, const DetectorSummary &b) {$/;"	f
operator <<	include/MersenneTwister.hpp	/^inline std::ostream& operator<<( std::ostream& os, const MTRand& mtrand )$/;"	f
operator =	include/Trace.hpp	/^    const TFP& operator=(const TFP &right) {$/;"	f	class:TrapezoidalFilterParameters
operator =	src/StatsAccumulator.cpp	/^const StatsAccumulator& StatsAccumulator::operator=(const StatsAccumulator &x)$/;"	f	class:StatsAccumulator
operator ==	include/RawEvent.hpp	/^    bool operator==(const Identifier &x) const {$/;"	f	class:Identifier
operator >>	include/MersenneTwister.hpp	/^inline std::istream& operator>>( std::istream& is, MTRand& mtrand )$/;"	f
operator bool	include/MapFile.hpp	/^    operator bool() {return isRead;} \/\/\/< is the map file valid$/;"	f	class:MapFile
operator ||	include/NewCorrelator.hpp	/^        virtual bool operator|| (const Place& right) const {$/;"	f	class:Place
operator ~	include/NewCorrelator.hpp	/^        virtual void operator~() {$/;"	f	class:Place
pNext	include/MersenneTwister.hpp	/^	uint32 *pNext;     \/\/ next value to get from state$/;"	m	class:MTRand
parents_	include/NewCorrelator.hpp	/^        vector<Place*> parents_;$/;"	m	class:Place
phase	include/TimingInformation.hpp	/^	Double_t phase[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
phase	include/TimingInformation.hpp	/^	double phase;$/;"	m	struct:TimingInformation::TimingData
pileUp	include/Correlator.hpp	/^    bool   pileUp;   \/\/\/< trace is piled-up$/;"	m	struct:EventInfo
pileupBit	include/RawEvent.hpp	/^    bool   pileupBit;          \/**< Pile-up flag from Pixie *\/$/;"	m	class:ChanEvent
pixie	include/Globals.hpp	/^namespace pixie {$/;"	n
pixieEnergyContraction	include/RawEvent.hpp	/^    static const double pixieEnergyContraction = 2.0; \/\/\/< energies from pixie16 are contracted by this number$/;"	m	class:ChanEvent
pixieEnergyContraction	src/RawEvent.cpp	/^const double ChanEvent::pixieEnergyContraction = 4.0;$/;"	m	class:ChanEvent	file:
pixieToWallClock	include/DetectorDriver.hpp	/^    pair<double, time_t> pixieToWallClock; \/**< rough estimate of pixie to wall clock *\/ $/;"	m	class:DetectorDriver
plot	include/Correlator.hpp	/^    virtual void plot(int dammId, double val1, double val2 = -1, double val3 = -1, const char* name="h") {$/;"	f	class:Correlator
plot	include/DetectorDriver.hpp	/^    virtual void plot(int dammId, double val1, double val2 = -1, double val3 = -1, const char* name="h") {$/;"	f	class:DetectorDriver
plot	include/EventProcessor.hpp	/^    virtual void plot(int dammId, double val1, double val2 = -1, double val3 = -1, const char* name="h") {$/;"	f	class:EventProcessor
plot	include/TraceAnalyzer.hpp	/^    virtual void plot(int dammId, double val1, double val2 = -1, double val3 = -1, const char* name="h") {$/;"	f	class:TraceAnalyzer
plotSize	include/TriggerLogicProcessor.hpp	/^    int plotSize;$/;"	m	class:TriggerLogicProcessor
plotsReg	include/PlotsRegister.hpp	/^    static PlotsRegister plotsReg;$/;"	m	class:PlotsRegister
polyOrder	include/DetectorDriver.hpp	/^    unsigned int polyOrder; \/**< the order of the calibration *\/$/;"	m	class:Calibration
posScale	include/LitePositionProcessor.hpp	/^    float posScale;        \/\/< an arbitrary scale for the position parameter to physical units$/;"	m	class:LitePositionProcessor
posScale	include/PositionProcessor.hpp	/^    float posScale;        \/\/< an arbitrary scale for the position parameter to physical units$/;"	m	class:PositionProcessor
position	include/Correlator.hpp	/^    double position; \/\/\/< calculated strip position$/;"	m	struct:EventInfo
position	include/DammPlotIds.hpp	/^    namespace position {$/;"	n	namespace:dammIds
position	src/LitePositionProcessor.cpp	/^    namespace position {$/;"	n	namespace:dammIds	file:
position	src/PositionProcessor.cpp	/^    namespace position {$/;"	n	namespace:dammIds	file:
pulse	include/TraceFilterer.hpp	/^    PulseInfo pulse;$/;"	m	class:TraceFilterer
pulser	include/DammPlotIds.hpp	/^    namespace pulser{ $/;"	n	namespace:dammIds
pulser	src/PulserProcessor.cpp	/^   namespace pulser {$/;"	n	namespace:dammIds	file:
pulserMap	include/PulserProcessor.hpp	/^    TimingDataMap pulserMap;$/;"	m	class:PulserProcessor
push_back	src/DetectorLibrary.cpp	/^void DetectorLibrary::push_back(const Identifier &x)$/;"	f	class:DetectorLibrary
qdc	include/TimingInformation.hpp	/^	double qdc;$/;"	m	struct:TimingInformation::BarData
qdcCompression	include/TimingInformation.hpp	/^    static const double qdcCompression = 4.0;$/;"	m	class:TimingInformation
qdcLen	include/LitePositionProcessor.hpp	/^    float qdcLen[numQdcs]; \/\/< the length of each qdc in pixie samples									$/;"	m	class:LitePositionProcessor
qdcLen	include/PositionProcessor.hpp	/^    float qdcLen[numQdcs]; \/\/< the length of each qdc in pixie samples$/;"	m	class:PositionProcessor
qdcPos	include/LitePositionProcessor.hpp	/^    float qdcPos[numQdcs]; \/\/< the ending sample number for each QDC position$/;"	m	class:LitePositionProcessor
qdcPos	include/PositionProcessor.hpp	/^    float qdcPos[numQdcs]; \/\/< the ending sample number for each QDC position$/;"	m	class:PositionProcessor
qdcPos	include/TimingInformation.hpp	/^	double qdcPos;$/;"	m	struct:TimingInformation::BarData
qdcValue	include/RawEvent.hpp	/^    pixie::word_t qdcValue[numQdcs];  \/**< QDCs from onboard *\/$/;"	m	class:ChanEvent
r0	include/TimingInformation.hpp	/^	double r0;$/;"	m	struct:TimingInformation::TimingCal
rMaxVal	include/TimingInformation.hpp	/^	double rMaxVal;$/;"	m	struct:TimingInformation::BarData
rand	include/MersenneTwister.hpp	/^inline double MTRand::rand( const double& n )$/;"	f	class:MTRand
rand	include/MersenneTwister.hpp	/^inline double MTRand::rand()$/;"	f	class:MTRand
rand53	include/MersenneTwister.hpp	/^inline double MTRand::rand53()$/;"	f	class:MTRand
randDblExc	include/MersenneTwister.hpp	/^inline double MTRand::randDblExc( const double& n )$/;"	f	class:MTRand
randDblExc	include/MersenneTwister.hpp	/^inline double MTRand::randDblExc()$/;"	f	class:MTRand
randExc	include/MersenneTwister.hpp	/^inline double MTRand::randExc( const double& n )$/;"	f	class:MTRand
randExc	include/MersenneTwister.hpp	/^inline double MTRand::randExc()$/;"	f	class:MTRand
randInt	include/MersenneTwister.hpp	/^inline MTRand::uint32 MTRand::randInt( const uint32& n )$/;"	f	class:MTRand
randInt	include/MersenneTwister.hpp	/^inline MTRand::uint32 MTRand::randInt()$/;"	f	class:MTRand
randNorm	include/MersenneTwister.hpp	/^inline double MTRand::randNorm( const double& mean, const double& variance )$/;"	f	class:MTRand
randoms	src/RandomPool.cpp	/^RandomPool randoms; \/\/\/< an ugly global to hold some random numbers$/;"	v
range	include/Plots.hpp	/^    int range;$/;"	m	class:Plots
raw	include/DammPlotIds.hpp	/^    namespace raw {$/;"	n	namespace:dammIds
raw	include/IonChamberProcessor.hpp	/^    double raw[noDets];$/;"	m	struct:IonChamberProcessor::Data
raw	include/McpProcessor.hpp	/^    double raw[nPos];$/;"	m	struct:McpProcessor::McpData
rawev	src/PixieStd.cpp	/^RawEvent rawev;$/;"	v
readbuff	include/Globals.hpp	/^namespace readbuff {$/;"	n
reg	include/PlotsRegister.hpp	/^    std::vector< MinMax > reg;$/;"	m	class:PlotsRegister
reload	include/MersenneTwister.hpp	/^inline void MTRand::reload()$/;"	f	class:MTRand
report_	include/NewCorrelator.hpp	/^        virtual void report_() {$/;"	f	class:Place
riseSamples	include/Trace.hpp	/^    Trace::size_type riseSamples;$/;"	m	class:TrapezoidalFilterParameters
runTime0	include/RawEvent.hpp	/^    pixie::word_t runTime0;    \/**< Lower bits of run time *\/$/;"	m	class:ChanEvent
runTime1	include/RawEvent.hpp	/^    pixie::word_t runTime1;    \/**< Upper bits of run time *\/$/;"	m	class:ChanEvent
runTime2	include/RawEvent.hpp	/^    pixie::word_t runTime2;    \/**< Higher bits of run time *\/$/;"	m	class:ChanEvent
saturatedBit	include/RawEvent.hpp	/^    bool   saturatedBit;       \/**< Saturation flag from Pixie *\/$/;"	m	class:ChanEvent
save	include/MersenneTwister.hpp	/^inline void MTRand::save( uint32* saveArray ) const$/;"	f	class:MTRand
scanMode	src/PixieStd.cpp	/^const string scanMode = "scan";$/;"	v
scint	include/DammPlotIds.hpp	/^    namespace scint {$/;"	n	namespace:dammIds
scint	src/ScintProcessor.cpp	/^    namespace scint {$/;"	n	namespace:dammIds	file:
seed	include/MersenneTwister.hpp	/^inline void MTRand::seed( const uint32 oneSeed )$/;"	f	class:MTRand
seed	include/MersenneTwister.hpp	/^inline void MTRand::seed( uint32 *const bigSeed, const uint32 seedLength )$/;"	f	class:MTRand
seed	include/MersenneTwister.hpp	/^inline void MTRand::seed()$/;"	f	class:MTRand
sigma	include/FittingAnalyzer.hpp	/^	double * sigma;$/;"	m	struct:FittingAnalyzer::FitData
signalToNoise	include/TimingInformation.hpp	/^	double signalToNoise;$/;"	m	struct:TimingInformation::TimingData
size	include/RandomPool.hpp	/^  static const size_t size = 1000000; \/\/\/< default size of the pool$/;"	m	class:RandomPool
slowThreshold	include/TraceFilterer.hpp	/^    Trace::value_type            slowThreshold;$/;"	m	class:TraceFilterer
smallLeft	include/VandleROOT.hpp	/^    DataRoot smallLeft;$/;"	m	class:VandleROOT
smallMap	include/VandleProcessor.hpp	/^    TimingDataMap smallMap;$/;"	m	class:VandleProcessor
smallRight	include/VandleROOT.hpp	/^    DataRoot smallRight;$/;"	m	class:VandleROOT
ssd	include/DammPlotIds.hpp	/^    namespace ssd {$/;"	n	namespace:dammIds
ssd	src/SsdProcessor.cpp	/^    namespace ssd {$/;"	n	namespace:dammIds	file:
startCount	include/LogicProcessor.hpp	/^    std::vector<unsigned long> startCount; \/\/< number of starts received$/;"	m	class:LogicProcessor
startMap	include/VandleProcessor.hpp	/^    TimingDataMap startMap;$/;"	m	class:VandleProcessor
statSize	include/RawEvent.hpp	/^    static const size_t statSize = N_DSP_PAR - DSP_IO_BORDER;$/;"	m	class:StatsData
state	include/MersenneTwister.hpp	/^	uint32 state[N];   \/\/ internal state$/;"	m	class:MTRand
stats	src/StatsData.cpp	/^StatsData stats;$/;"	v
status	include/NewCorrelator.hpp	/^        virtual bool status() const {$/;"	f	class:Place
status_	include/NewCorrelator.hpp	/^        bool status_;$/;"	m	class:Place
stdDevBaseline	include/TimingInformation.hpp	/^	Double_t stdDevBaseline[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
stdDevBaseline	include/TimingInformation.hpp	/^	double stdDevBaseline;$/;"	m	struct:TimingInformation::TimingData
stopCount	include/LogicProcessor.hpp	/^    std::vector<unsigned long> stopCount;  \/\/< number of stops received$/;"	m	class:LogicProcessor
subtype	include/RawEvent.hpp	/^    std::string subtype;               \/**< detector subtype associated with this summary *\/$/;"	m	class:DetectorSummary
subtype	include/RawEvent.hpp	/^    std::string subtype;   \/**< Specifies the detector sub type *\/$/;"	m	class:Identifier
subtype	include/TauAnalyzer.hpp	/^  std::string subtype;$/;"	m	class:TauAnalyzer
subtype	include/TraceExtracter.hpp	/^    std::string subtype;$/;"	m	class:TraceExtracter
sum	include/StatsAccumulator.hpp	/^    double sum;   \/\/< the sum of the values$/;"	m	class:StatsAccumulator
sumMap	include/EventProcessor.hpp	/^    std::map<std::string, const DetectorSummary *> sumMap;$/;"	m	class:EventProcessor
sumMap	include/RawEvent.hpp	/^    std::map<std::string, DetectorSummary> sumMap; \/**< An STL map containing DetectorSummary classes$/;"	m	class:RawEvent
sumSq	include/StatsAccumulator.hpp	/^    double sumSq; \/\/< the sum of the values squared$/;"	m	class:StatsAccumulator
symplot	src/GeProcessor.cpp	/^void GeProcessor::symplot(int dammID, double bin1, double bin2)$/;"	f	class:GeProcessor
systemTime	include/EventProcessor.hpp	/^    double systemTime;$/;"	m	class:EventProcessor
systemTime	include/TraceAnalyzer.hpp	/^    double systemTime;        \/\/\/< system time used by this class$/;"	m	class:TraceAnalyzer
tag	include/RawEvent.hpp	/^    std::map<std::string, TagValue> tag;  \/**< A list of tags associated with the identifer *\/ $/;"	m	class:Identifier
tag	include/RawEvent.hpp	/^    std::string tag;               \/**< detector tag associated with this summary *\/$/;"	m	class:DetectorSummary
tau	include/Trace.hpp	/^    double tau;$/;"	m	class:TrapezoidalFilterParameters
theta	include/TimingInformation.hpp	/^	double theta;$/;"	m	struct:TimingInformation::BarData
thirdFilter	include/TraceFilterer.hpp	/^    Trace thirdFilter;  \/\/\/< second slow filter of trace$/;"	m	class:TraceFilterer
thirdParms	include/TraceFilterer.hpp	/^    TrapezoidalFilterParameters  thirdParms;$/;"	m	class:TraceFilterer
thresh	include/DetectorDriver.hpp	/^    vector<float> thresh;   \/**< the lower limit for each respective calibration *\/$/;"	m	class:Calibration
time	include/Correlator.hpp	/^    double time;     \/\/\/< timestamp of event$/;"	m	struct:EventInfo
time	include/RawEvent.hpp	/^    double time;               \/**< Raw channel time, 64 bit from pixie16 channel event time *\/$/;"	m	class:ChanEvent
time	include/TraceFilterer.hpp	/^	Trace::size_type time;$/;"	m	struct:TraceFilterer::PulseInfo
time2	include/DoubleTraceAnalyzer.hpp	/^    Trace::size_type time2; \/\/\/< time of second pulse$/;"	m	class:DoubleTraceAnalyzer
timeAve	include/TimingInformation.hpp	/^	double timeAve;$/;"	m	struct:TimingInformation::BarData
timeDiff	include/TimingInformation.hpp	/^	double timeDiff;$/;"	m	struct:TimingInformation::BarData
timeDiffs	include/IonChamberProcessor.hpp	/^  std::deque<double> timeDiffs[noDets];$/;"	m	class:IonChamberProcessor
timeOfFlight	include/TimingInformation.hpp	/^	std::map<unsigned int, double> timeOfFlight;$/;"	m	struct:TimingInformation::BarData
timeResolution	include/GeProcessor.hpp	/^    std::vector<float> timeResolution; \/*!< Contatin time resolutions used *\/$/;"	m	class:GeProcessor
timesToKeep	include/IonChamberProcessor.hpp	/^  static const size_t timesToKeep = 1000;$/;"	m	class:IonChamberProcessor
titleList	include/Plots.hpp	/^    std::map <int, std::string> titleList;$/;"	m	class:Plots
tmsBegin	include/EventProcessor.hpp	/^    tms tmsBegin;$/;"	m	class:EventProcessor
tmsBegin	include/TraceAnalyzer.hpp	/^    tms tmsBegin;             \/\/\/< time at which the analyzer began$/;"	m	class:TraceAnalyzer
tof	include/Correlator.hpp	/^    double tof;      \/\/\/< time of flight for an implant$/;"	m	struct:EventInfo
tofOffset0	include/TimingInformation.hpp	/^	double tofOffset0;$/;"	m	struct:TimingInformation::TimingCal
tofOffset1	include/TimingInformation.hpp	/^	double tofOffset1;$/;"	m	struct:TimingInformation::TimingCal
toggle	include/NewCorrelator.hpp	/^        virtual void toggle() {$/;"	f	class:Place
totLen	include/LitePositionProcessor.hpp	/^    float totLen;          \/\/< calculated length of all qdcs excluding baseline qdc$/;"	m	class:LitePositionProcessor
totLen	include/PositionProcessor.hpp	/^    float totLen;          \/\/< calculated length of all qdcs excluding baseline qdc$/;"	m	class:PositionProcessor
totalEnergy	include/GeProcessor.hpp	/^    double totalEnergy;$/;"	m	class:CloverEvent
tqdc	include/TimingInformation.hpp	/^	Double_t tqdc[maxMultiplicity];$/;"	m	struct:TimingInformation::DataRoot
tqdc	include/TimingInformation.hpp	/^	double tqdc;$/;"	m	struct:TimingInformation::TimingData
trace	include/DammPlotIds.hpp	/^    namespace trace {$/;"	n	namespace:dammIds
trace	include/RawEvent.hpp	/^    Trace trace;               \/**< Channel trace if present *\/$/;"	m	class:ChanEvent
trace	include/TimingInformation.hpp	/^	const Trace &trace;$/;"	m	struct:TimingInformation::TimingData
trace	src/Trace.cpp	/^    namespace trace {$/;"	n	namespace:dammIds	file:
traceBins	include/TraceExtracter.hpp	/^    static const int traceBins;$/;"	m	class:TraceExtracter
traceBins	include/TracePlotter.hpp	/^    static const int traceBins;$/;"	m	class:TracePlotter
traceBins	src/TraceExtracter.cpp	/^const int TraceExtracter::traceBins = SC;$/;"	m	class:TraceExtracter	file:
traceBins	src/TracePlotter.cpp	/^const int TracePlotter::traceBins = SC;$/;"	m	class:TracePlotter	file:
tree	include/RootProcessor.hpp	/^    TTree *tree; \/\/< ROOT tree where event branches are filled$/;"	m	class:RootProcessor
trigTime	include/RawEvent.hpp	/^    pixie::word_t trigTime;    \/**< The channel trigger time, trigger time and the lower 32 bits$/;"	m	class:ChanEvent
triggerlogic	include/DammPlotIds.hpp	/^    namespace triggerlogic {$/;"	n	namespace:dammIds
triggerlogic	src/TriggerLogicProcessor.cpp	/^    namespace triggerlogic {$/;"	n	namespace:dammIds	file:
tvandle	src/VandleProcessor.cpp	/^    namespace tvandle {$/;"	n	namespace:dammIds	file:
tvandleMap	include/VandleProcessor.hpp	/^    TimingDataMap tvandleMap;$/;"	m	class:VandleProcessor
twist	include/MersenneTwister.hpp	/^	uint32 twist( const uint32& m, const uint32& s0, const uint32& s1 ) const$/;"	f	class:MTRand
type	include/Correlator.hpp	/^    EEventTypes type; \/\/\/< event type$/;"	m	struct:EventInfo
type	include/RawEvent.hpp	/^    std::string type;                  \/**< detector type associated with this summary *\/$/;"	m	class:DetectorSummary
type	include/RawEvent.hpp	/^    std::string type;      \/**< Specifies the detector type *\/$/;"	m	class:Identifier
type	include/TauAnalyzer.hpp	/^  std::string type;$/;"	m	class:TauAnalyzer
type	include/TraceExtracter.hpp	/^    std::string type;$/;"	m	class:TraceExtracter
uint32	include/MersenneTwister.hpp	/^	typedef unsigned long uint32;  \/\/ unsigned integer type, at least 32 bits$/;"	t	class:MTRand
useThirdFilter	include/TraceFilterer.hpp	/^    bool useThirdFilter;$/;"	m	class:TraceFilterer
usedSubtypes	include/DetectorLibrary.hpp	/^    std::set<std::string> usedSubtypes;$/;"	m	class:DetectorLibrary
usedTypes	include/DetectorLibrary.hpp	/^    std::set<std::string> usedTypes;$/;"	m	class:DetectorLibrary
userTime	include/EventProcessor.hpp	/^    double userTime;$/;"	m	class:EventProcessor
userTime	include/TraceAnalyzer.hpp	/^    double userTime;          \/\/\/< user time used by this class$/;"	m	class:TraceAnalyzer
val	include/DetectorDriver.hpp	/^    vector<float> val;      \/**< the individual calibration coefficients in increasing order *\/$/;"	m	class:Calibration
vandle	include/DammPlotIds.hpp	/^    namespace vandle{ \/\/The RANGE can be greatly reduced. -SVP$/;"	n	namespace:dammIds
vandle	src/VandleProcessor.cpp	/^    namespace vandle {$/;"	n	namespace:dammIds	file:
vecAnalyzer	include/DetectorDriver.hpp	/^    vector<TraceAnalyzer *> vecAnalyzer; \/**< object which analyzes traces of channels to extract$/;"	m	class:DetectorDriver
vecProcess	include/DetectorDriver.hpp	/^    vector<EventProcessor *> vecProcess; \/**< vector of processors to handle each event *\/$/;"	m	class:DetectorDriver
vecProcess	include/RootProcessor.hpp	/^    vector<EventProcessor *> vecProcess;$/;"	m	class:RootProcessor
virtualChannel	include/RawEvent.hpp	/^    bool   virtualChannel;     \/**< Flagged if generated virtually in Pixie DSP *\/$/;"	m	class:ChanEvent
walk	include/TimingInformation.hpp	/^	double walk;$/;"	m	struct:TimingInformation::TimingData
walkCorTime	include/TimingInformation.hpp	/^	double walkCorTime;$/;"	m	struct:TimingInformation::TimingData
walkCorTimeDiff	include/TimingInformation.hpp	/^	double walkCorTimeDiff;$/;"	m	struct:TimingInformation::BarData
waveformanalyzer	include/DammPlotIds.hpp	/^    namespace waveformanalyzer{ $/;"	n	namespace:dammIds
waveformanalyzer	src/FittingAnalyzer.cpp	/^   namespace waveformanalyzer {$/;"	n	namespace:dammIds	file:
what	include/NewCorrelator.hpp	/^    virtual const char* what() const throw()$/;"	f	class:GeneralException
whichQdc	include/LitePositionProcessor.hpp	/^    int whichQdc;          \/\/< which qdc we are using for position determinatio$/;"	m	class:LitePositionProcessor
whichQdc	include/PositionProcessor.hpp	/^    int whichQdc;          \/\/< which qdc we are using for position determinatio$/;"	m	class:PositionProcessor
width	include/FittingAnalyzer.hpp	/^	double width;$/;"	m	struct:FittingAnalyzer::FitData
word_t	include/Globals.hpp	/^    typedef uint32_t word_t; \/\/< a pixie word$/;"	t	namespace:pixie
xOffset	include/TimingInformation.hpp	/^	double xOffset;$/;"	m	struct:TimingInformation::TimingCal
xpos	include/McpProcessor.hpp	/^    double xpos;$/;"	m	struct:McpProcessor::McpData
y	include/FittingAnalyzer.hpp	/^	double * y;$/;"	m	struct:FittingAnalyzer::FitData
ypos	include/McpProcessor.hpp	/^    double ypos;$/;"	m	struct:McpProcessor::McpData
z0	include/TimingInformation.hpp	/^	double z0;$/;"	m	struct:TimingInformation::TimingCal
zOffset	include/TimingInformation.hpp	/^	double zOffset;$/;"	m	struct:TimingInformation::TimingCal
~CfdAnalyzer	include/CfdAnalyzer.hpp	/^    virtual ~CfdAnalyzer() {};$/;"	f	class:CfdAnalyzer
~Correlator	src/Correlator.cpp	/^Correlator::~Correlator()$/;"	f	class:Correlator
~DetectorDriver	src/DetectorDriver.cpp	/^DetectorDriver::~DetectorDriver()$/;"	f	class:DetectorDriver
~DetectorLibrary	src/DetectorLibrary.cpp	/^DetectorLibrary::~DetectorLibrary()$/;"	f	class:DetectorLibrary
~DoubleTraceAnalyzer	src/DoubleTraceAnalyzer.cpp	/^DoubleTraceAnalyzer::~DoubleTraceAnalyzer() $/;"	f	class:DoubleTraceAnalyzer
~EventProcessor	src/EventProcessor.cpp	/^EventProcessor::~EventProcessor() $/;"	f	class:EventProcessor
~FittingAnalyzer	include/FittingAnalyzer.hpp	/^    virtual ~FittingAnalyzer() {};$/;"	f	class:FittingAnalyzer
~GeneralException	include/NewCorrelator.hpp	/^    virtual ~GeneralException() throw() {}$/;"	f	class:GeneralException
~Place	include/NewCorrelator.hpp	/^        virtual ~Place() {$/;"	f	class:Place
~RootProcessor	src/RootProcessor.cpp	/^RootProcessor::~RootProcessor()$/;"	f	class:RootProcessor
~StatsAccumulator	src/StatsAccumulator.cpp	/^StatsAccumulator::~StatsAccumulator()$/;"	f	class:StatsAccumulator
~TauAnalyzer	src/TauAnalyzer.cpp	/^TauAnalyzer::~TauAnalyzer()$/;"	f	class:TauAnalyzer
~TraceAnalyzer	src/TraceAnalyzer.cpp	/^TraceAnalyzer::~TraceAnalyzer() $/;"	f	class:TraceAnalyzer
~TraceExtracter	src/TraceExtracter.cpp	/^TraceExtracter::~TraceExtracter()$/;"	f	class:TraceExtracter
~TraceFilterer	src/TraceFilterer.cpp	/^TraceFilterer::~TraceFilterer()$/;"	f	class:TraceFilterer
~TracePlotter	src/TracePlotter.cpp	/^TracePlotter::~TracePlotter()$/;"	f	class:TracePlotter
~WaveformAnalyzer	include/WaveformAnalyzer.hpp	/^    virtual ~WaveformAnalyzer() {};$/;"	f	class:WaveformAnalyzer
